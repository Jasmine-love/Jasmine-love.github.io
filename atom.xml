<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋天的枫叶</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-04T03:28:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>秋天的枫叶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用电脑快捷键</title>
    <link href="http://yoursite.com/2017/07/04/%E5%B8%B8%E7%94%A8%E7%94%B5%E8%84%91%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2017/07/04/常用电脑快捷键/</id>
    <published>2017-07-04T02:25:55.000Z</published>
    <updated>2017-07-04T03:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>习惯了鼠标的运用，对于键盘本身却并不是特别了解，在这里，整理了一些常用的快捷键帮助自己更好的使用电脑。</p>
<h2 id="从所有快捷键中整理出的自己常用的快捷键"><a href="#从所有快捷键中整理出的自己常用的快捷键" class="headerlink" title="从所有快捷键中整理出的自己常用的快捷键"></a>从所有快捷键中整理出的自己常用的快捷键</h2><blockquote>
<p>WIN 显示或隐藏“开始”菜单<br>WIN + D 显示桌面<br>WIN + M 最小化所有窗口 //我认为和WIN + D大同小异<br>WIN + SHIFt + M 还原最小化的窗口<br>WIN + E 打开“我的电脑”<br>WIN + R 打开“运行”对话框<br>Ctrl + A 选中全部内容<br>Ctrl + C 复制<br>Ctrl + X 剪切<br>Ctrl + V 粘贴<br>Ctrl + Z 撤消<br>Ctrl + W 关闭程序<br>Ctrl + F4 关闭当前页面<br>DELETE 删除<br>Shift + Delete 永久删除所选项，而不将它放在‘回收站’中</p>
</blockquote>
<p>Alt + F4 关闭当前项目或退出程序<br>Alt + Tab在打开的项目之中进行切换<br>F5刷新当前窗口<br>Shift + F5 强制刷新</p>
<h2 id="常用电脑快捷键"><a href="#常用电脑快捷键" class="headerlink" title="常用电脑快捷键"></a>常用电脑快捷键</h2><blockquote>
<p>F1显示程序或系统帮助内容<br>F2重新命名所选项目<br>F3搜索文件或文件夹<br>F5刷新当前窗口<br>F6循环切换屏幕元素<br>F10激活当前程序中的菜单条<br>Ctrl + A选中全部内容<br>Ctrl + C复制<br>Ctrl + X剪切<br>Ctrl + V粘贴<br>Ctrl + Z撤消<br>Ctrl + Esc显示“开始”菜单<br>Alt + Enter查看所选项目的属性<br>Alt + F4关闭当前项目或退出程序<br>Alt + 空格键为当前窗口打开快捷菜单<br>Alt + Tab在打开的项目之间切换<br>Alt + Esc以项目打开的顺序循环切换<br>DELETE删除<br>Shift + Delete永久删除所选项<br>Shift + F10显示所选项的快捷菜单<br>Esc取消当前任务<br>ctrl + alt + delete电脑锁屏快捷键<br>电脑：print screen sysrq 在键盘右上角一般靠近F12键截图<br>qq：ctrl + alt + A截图<br>360浏览器：Ctrl + Shift + X截图</p>
</blockquote>
<h2 id="Ctrl快捷键"><a href="#Ctrl快捷键" class="headerlink" title="Ctrl快捷键"></a>Ctrl快捷键</h2><blockquote>
<p>Ctrl + S保存<br>Ctrl + W关闭程序<br>Ctrl + N新建<br>Ctrl + O打开<br>Ctrl + Z撤销<br>Ctrl + F查找<br>Ctrl + X剪切<br>Ctrl + C复制<br>Ctrl + V粘贴<br>Ctrl + A全选<br>Ctrl + [缩小文字<br>Ctrl + [缩小文字<br>Ctrl + ]放大文字<br>Ctrl + B粗体<br>Ctrl + I斜体<br>Ctrl + U下划线<br>Ctrl + Shift输入法切换<br>Ctrl + 空格中英文切换<br>Ctrl + 回车QQ号中发送信息<br>Ctrl + Home光标快速移到文件头<br>Ctrl + End光标快速移到文件尾<br>Ctrl + Esc显示开始菜单<br>Ctrl + Shift + 快速放大文字<br>Ctrl + F5在IE中强行刷新<br>Ctrl + 拖动文件启动\关闭输入法<br>Ctrl + Shift + 拖动文件创建快捷方式</p>
</blockquote>
<h2 id="Alt快捷键"><a href="#Alt快捷键" class="headerlink" title="Alt快捷键"></a>Alt快捷键</h2><blockquote>
<p>Alt + F4关闭当前程序<br>Alt + 空格 + C关闭窗口<br>Alt + 空格 + N最小化当前窗口<br>Alt + 空格 + R恢复最小化窗口<br>Alt + 空格 + X最大化当前窗口<br>Alt + 空格 + M移动窗口<br>Alt + 空格 + S改变窗口大小<br>Alt + Tab两个程序交换<br>Alt + F打开文件菜单<br>Alt + V打开视图菜单<br>Alt + E打开编辑菜单<br>Alt + I打开插入菜单<br>Alt + O打开格式菜单<br>Alt + T打开工具菜单<br>Alt + A打开表格菜单<br>Alt + W打开窗口菜单<br>Alt + H打开帮助菜单<br>Alt + 回车查看文件属性<br>Alt + 双击文件查看文件属性<br>Shift + 空格半\全角切换<br>Shift + 右击右菜单打开方式<br>Shift + F10选中文件的右菜单<br>Shift + 多级文件全部关闭<br>Shift + Del直接删除文件</p>
</blockquote>
<h2 id="对话框快捷键"><a href="#对话框快捷键" class="headerlink" title="对话框快捷键"></a>对话框快捷键</h2><blockquote>
<p>Ctrl + Tab在选项卡之间向前移动<br>Ctrl + Shift + Tab在选项卡之间向后移动<br>Shift + Tab在选项之间向后移动<br>ALT + 带下划线的字母执行相应的命令或选中相应的选项<br>Enter执行活选项动或按钮所对应的命令<br>space空格键如果活选项动是复选框，则选中或清除该复选框<br>F1显示帮助<br>F4显示当前列表中的项目<br>BackSpace如果在“另存为”或“打开”对话框中选中了某个文件夹，则打开上一级文件夹</p>
</blockquote>
<h2 id="辅助键盘快捷键"><a href="#辅助键盘快捷键" class="headerlink" title="辅助键盘快捷键"></a>辅助键盘快捷键</h2><blockquote>
<p>右侧SHIFT键八秒钟切换“筛选键”的开和关<br>左边的ALT + 左边的SHIFT + PRINTSCREEN切换“高对比度”的开和关<br>左边的ALT + 左边的SHIFT + NUMLOCK切换“鼠标键”的开和关<br>Shift键五次切换“粘滞键”的开和关<br>NumLock键五秒钟切换“切换键”的开和关<br>Alt + Shift +   + 扩展标题下的文本<br>Alt + Shift +  -折叠标题下的文本<br>Alt + Shift + A扩展或折叠所有文本或标题<br>数字键盘上的斜杠（/）隐藏或显示字符格式<br>Alt + Shift + L只显示首行正文或显示全部正文<br>Alt + Shift + 1显示所有具有”标题1”样式的标题<br>Alt + Shift + n显示从”标题1”到”标题n”的<br>“Windows资源管理器”键盘快捷键<br>END显示当前窗口的底端<br>Home显示当前窗口的顶端<br>NUMLOCK + 数字键盘的星号(*)显示所选文件夹的所有子文件夹<br>NUMLOCK + 数字键盘的加号( + )显示所选文件夹的内容<br>NUMLOCK + 数字键盘的减号(-)折叠所选的文件夹<br>单独按Windows：显示或隐藏“开始”功能表<br>Windows + BREAK显示“系统属性”对话框<br>Windows + D显示桌面<br>Windows + M最小化所有窗口<br>Windows + Shift + M还原最小化的窗口<br>Windows + E开启“资源管理器”<br>Windows + F查找文件或文件夹<br>Windows + CTRL + F查找电脑<br>Windows + F1显示Windows“帮助”<br>Windows + R运行<br>Windows + U开启“公用程序管理器”<br>Windows + L切换使用者</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;习惯了鼠标的运用，对于键盘本身却并不是特别了解，在这里，整理了一些常用的快捷键帮助自己更好的使用电脑。&lt;/p&gt;
&lt;h2 id=&quot;从所有快捷键中整理出的自己常用的快捷键&quot;&gt;&lt;a href=&quot;#从所有快捷键中整理出的自己常用的快捷键&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>working copy locked 问题</title>
    <link href="http://yoursite.com/2017/06/29/working-copy-locked-%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/29/working-copy-locked-问题/</id>
    <published>2017-06-29T06:10:10.000Z</published>
    <updated>2017-06-29T10:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>SVN本地更新时，由于一些操作中断更新，如磁盘空间不够，用户取消，可能会造成本地文件被锁定的情况。一般出现这种情况的解决方法：<br>１、可以使用SVN clean up来清除锁定。</p>
<p>２、如果不是本目录锁定，系统提示上一层目录锁定，需要到上一层或者根目录中清除。</p>
<p>３.如果在根目录下都无法clean的话，一般采取的方法是另外找一个目录重新CHECKOUT。但有时有时SVN目录下可能有一些自己本地修改的文件，还未提交到SVN服务器，这时重新CHECKOUT需要注意本地文件的备份，并且不要强制覆盖服务器上其它人修改的内容。</p>
<p>４.如果觉得第３种很麻烦，可以考虑这样的方法。其实SVN加锁会在.SVN（隐藏文件）中生成一个名字叫lock的文件（无后缀），查找所有的，手工删除。然后再尝试更新，系统可能会提示某个.base文件无法访问。找到它，把相关的文件或其所在的目录删除，重新UPDATE。工作量就小多了。</p>
<p>解决svn的working copy locked并且cleanup恢复不能的情况<br>产生这种情况大多是因为上次svn命令执行失败且被锁定了。<br>如果clean up没有效果的话只好手动删除锁定文件。<br>cd 到svn项目目录下，然后执行如下命令<br>del lock /q/s<br>就把锁删掉了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SVN本地更新时，由于一些操作中断更新，如磁盘空间不够，用户取消，可能会造成本地文件被锁定的情况。一般出现这种情况的解决方法：&lt;br&gt;１、可以使用SVN clean up来清除锁定。&lt;/p&gt;
&lt;p&gt;２、如果不是本目录锁定，系统提示上一层目录锁定，需要到上一层或者根目录中清除
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信小程序——400报错</title>
    <link href="http://yoursite.com/2017/06/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/06/23/微信小程序/</id>
    <published>2017-06-23T02:26:27.000Z</published>
    <updated>2017-06-23T07:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直跟着demo做小程序，但是刚开始就卡在了请求豆瓣电影API数据上，折腾了很久才发现问题，初始请求数据代码如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">wx.request(&#123;</div><div class="line">    url: <span class="string">'http://api.douban.com/v2/movie/top250'</span>,</div><div class="line">    method: <span class="string">'GET'</span>,</div><div class="line">    data: &#123;&#125;,</div><div class="line">    header: &#123;</div><div class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;,</div><div class="line">    success: <span class="keyword">function</span>(res) &#123;</div><div class="line">        console.log(res);</div><div class="line">        that.setData(&#123;</div><div class="line">            movieList: res</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>但是请求之后总是报400错误:<br><img src="/2017/06/23/微信小程序/QQ截图20170623103533.png" alt="报错信息"><br>后来才发现，小程序升级之后，数据请求的header写法已经变了，需要修改请求头部<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> wx.request(&#123;</div><div class="line">    url: <span class="string">'http://api.douban.com/v2/movie/top250'</span>,</div><div class="line">    method: <span class="string">'GET'</span>,</div><div class="line">    data: &#123;&#125;,</div><div class="line">    header: &#123;</div><div class="line">        <span class="string">"Content-Type"</span>:<span class="string">"json"</span></div><div class="line">    &#125;,</div><div class="line">    success: <span class="keyword">function</span>(res) &#123;</div><div class="line">        console.log(res);</div><div class="line">        that.setData(&#123;</div><div class="line">            movieList: res</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>改成这样之后就OK了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直跟着demo做小程序，但是刚开始就卡在了请求豆瓣电影API数据上，折腾了很久才发现问题，初始请求数据代码如下：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VUE简单教程</title>
    <link href="http://yoursite.com/2017/06/20/VUE%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/06/20/VUE简单教程/</id>
    <published>2017-06-20T08:17:38.000Z</published>
    <updated>2017-06-21T08:34:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用vue.js构建大型项目时建议使用NPM安装</p>
<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack -g</div></pre></td></tr></table></figure>
<h2 id="安装vue"><a href="#安装vue" class="headerlink" title="安装vue"></a>安装vue</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 最新稳定版本</span></div><div class="line">$ npm install vue</div><div class="line"><span class="comment"># 最新稳定兼容版本</span></div><div class="line">$ npm install vue@csp</div></pre></td></tr></table></figure>
<h2 id="安装vue-cli，执行以下命令安装vue-cli"><a href="#安装vue-cli，执行以下命令安装vue-cli" class="headerlink" title="安装vue cli，执行以下命令安装vue cli"></a>安装vue cli，执行以下命令安装vue cli</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g vue-cli</div></pre></td></tr></table></figure>
<p>安装完vue-cli之后，我们就可以基于vue-webpack-simple模板和vue-webpack模板创建项目了<br>在硬盘上找一个文件夹放工程用，在终端中进入该目录</p>
<h2 id="根据模板创建项目"><a href="#根据模板创建项目" class="headerlink" title="根据模板创建项目"></a>根据模板创建项目</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vue init webpack-simple 工程名字&lt;工程名字不能用中文&gt;</div><div class="line">或者创建vue1.0的项目</div><div class="line">vue init webpack-simple<span class="comment">#1.0 工程名字&lt;工程名字不能用中文&gt;</span></div></pre></td></tr></table></figure>
<p>在创建模板的时候会有一些初始化的设置：</p>
<p>Target directory exists. Continue? (Y/n) 直接回车默认(然后会下载 vue2.0模板，这里可能需要连代理)</p>
<p>Project name (vue-test) 直接回车默认</p>
<p>Project description (A Vue.js project) 直接回车默认</p>
<p>Author 写你自己的名字</p>
<h2 id="cd-命令进入创建的工程目录并安装项目依赖"><a href="#cd-命令进入创建的工程目录并安装项目依赖" class="headerlink" title="cd 命令进入创建的工程目录并安装项目依赖"></a>cd 命令进入创建的工程目录并安装项目依赖</h2><p>在做项目时经常用到的是路由模块vue-router和网络请求模块vue-resource<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-router vue-resource --save</div></pre></td></tr></table></figure></p>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用vue.js构建大型项目时建议使用NPM安装&lt;/p&gt;
&lt;h2 id=&quot;安装webpack&quot;&gt;&lt;a href=&quot;#安装webpack&quot; class=&quot;headerlink&quot; title=&quot;安装webpack&quot;&gt;&lt;/a&gt;安装webpack&lt;/h2&gt;&lt;figure clas
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅析解决跨域问题的几种方法</title>
    <link href="http://yoursite.com/2017/06/08/%E6%B5%85%E6%9E%90%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/06/08/浅析解决跨域问题的几种方法/</id>
    <published>2017-06-08T07:45:17.000Z</published>
    <updated>2017-06-08T07:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JSONP"><a href="#一、JSONP" class="headerlink" title="一、JSONP"></a>一、JSONP</h2><p>  原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。</p>
<p>  由于同源策略的限制，XmlHttpRequest只允许请求当前源(域名、协议、端口)的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。</p>
<p>  优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。</p>
<p>  JSONP：json+padding(内填充)，顾名思义，就是把JSON填充到一个盒子里</p>
<p>  javascript 代码</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">createJs(sUrl)&#123; </div><div class="line"></div><div class="line">    var oScript = document.createElement(<span class="string">'script'</span>); </div><div class="line">    oScript.type = <span class="string">'text/javascript'</span>; </div><div class="line">    oScript.src = sUrl; </div><div class="line">    document.getElementsByTagName(<span class="string">'head'</span>)[0].appendChild(oScript); </div><div class="line">&#125; </div><div class="line"></div><div class="line">createJs(<span class="string">'jsonp.js'</span>); </div><div class="line"></div><div class="line">box(&#123; </div><div class="line">   <span class="string">'name'</span>: <span class="string">'test'</span> </div><div class="line">&#125;); </div><div class="line"></div><div class="line"><span class="keyword">function</span> box(json)&#123; </div><div class="line">    alert(json.name); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二、CORS"><a href="#二、CORS" class="headerlink" title="二、CORS"></a>二、CORS</h2><p>  服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。</p>
<h2 id="三、通过修改document-domain来跨子域"><a href="#三、通过修改document-domain来跨子域" class="headerlink" title="三、通过修改document.domain来跨子域"></a>三、通过修改document.domain来跨子域</h2><p>  将子域和主域的document.domain设为同一个主域.前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域</p>
<p>  主域相同的使用document.domain</p>
<h2 id="四、使用window-name来进行跨域"><a href="#四、使用window-name来进行跨域" class="headerlink" title="四、使用window.name来进行跨域"></a>四、使用window.name来进行跨域</h2><p>  window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的</p>
<h2 id="五、使用HTML5中新引进的window-postMessage方法来跨域传送数据"><a href="#五、使用HTML5中新引进的window-postMessage方法来跨域传送数据" class="headerlink" title="五、使用HTML5中新引进的window.postMessage方法来跨域传送数据"></a>五、使用HTML5中新引进的window.postMessage方法来跨域传送数据</h2><p>  还有flash、在服务器上设置代理页面等跨域方式。个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、JSONP&quot;&gt;&lt;a href=&quot;#一、JSONP&quot; class=&quot;headerlink&quot; title=&quot;一、JSONP&quot;&gt;&lt;/a&gt;一、JSONP&lt;/h2&gt;&lt;p&gt;  原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2017/06/06/Git/"/>
    <id>http://yoursite.com/2017/06/06/Git/</id>
    <published>2017-06-06T08:59:47.000Z</published>
    <updated>2017-06-06T10:09:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>当了这么长时间的程序员，突然发现对于<a href="https://git-scm.com/download/" target="_blank" rel="external">Git</a>好像不太会用，在这里，让我们一起学习一下<a href="https://git-scm.com/download/" target="_blank" rel="external">Git</a>的使用方法吧。</p>
<h2 id="Git初始化"><a href="#Git初始化" class="headerlink" title="Git初始化"></a>Git初始化</h2><p>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。<br>在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。<br>使用当前目录作为Git仓库，我们只需使它初始化。</p>
<p>使用当前目录作为Git仓库，我们只需使它初始化。该命令执行完后会在当前目录生成一个 .git 目录。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<p>使用我们指定目录作为Git仓库。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init newrepo</div></pre></td></tr></table></figure>
<p>初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add *.c</div><div class="line">$ git add README</div><div class="line">$ git commit -m <span class="string">'初始化项目版本'</span></div></pre></td></tr></table></figure>
<h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p>
<p>我在版本库newrepo目录下新建一个记事本文件 readme.txt 内容如下：11111111</p>
<h3 id="第一步：使用命令-git-add-readme-txt添加到暂存区里面去。如下"><a href="#第一步：使用命令-git-add-readme-txt添加到暂存区里面去。如下" class="headerlink" title="第一步：使用命令 git add readme.txt添加到暂存区里面去。如下"></a>第一步：使用命令 git add readme.txt添加到暂存区里面去。如下</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add readme.txt</div></pre></td></tr></table></figure>
<h3 id="用命令-git-commit告诉Git，把文件提交到仓库。后面的是内容提示，可加可不加"><a href="#用命令-git-commit告诉Git，把文件提交到仓库。后面的是内容提示，可加可不加" class="headerlink" title="用命令 git commit告诉Git，把文件提交到仓库。后面的是内容提示，可加可不加"></a>用命令 git commit告诉Git，把文件提交到仓库。后面的是内容提示，可加可不加</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git commit -m <span class="string">'提交test.txt文件'</span></div></pre></td></tr></table></figure>
<p>现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git status</div></pre></td></tr></table></figure>
<p>如果文件有改动知，提交修改和提交文件是一样的2步(第一步是git add  第二步是：git commit)。</p>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行内容为33333333333333.并按照上述步骤进行提交。</p>
<p>现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git <span class="built_in">log</span></div></pre></td></tr></table></figure>
<p>git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git <span class="built_in">log</span> –pretty=oneline</div></pre></td></tr></table></figure>
<p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset  –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset  –hard HEAD~100 即可。如果想回退到上一个版本的命令如下操作：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git reset  --hard HEAD^</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git reset  --hard HEAD~100</div></pre></td></tr></table></figure>
<p>再来查看下 readme.txt内容如下：通过命令cat readme.txt查看</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  cat readme.txt</div></pre></td></tr></table></figure>
<p>我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：git reset  –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog  演示如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git reflog</div></pre></td></tr></table></figure>
<p>通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令git reset  –hard 6fcfc89来恢复了。演示如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset  --hard 6fcfc89</div></pre></td></tr></table></figure>
<p>可以看到 目前已经是最新的版本了。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当了这么长时间的程序员，突然发现对于&lt;a href=&quot;https://git-scm.com/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;好像不太会用，在这里，让我们一起学习一下&lt;a href=&quot;https://git-
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BlueLake博客主题的详细配置</title>
    <link href="http://yoursite.com/2017/05/25/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/05/25/BlueLake博客主题的详细配置/</id>
    <published>2017-05-25T03:41:18.000Z</published>
    <updated>2017-06-06T08:53:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/themes/" target="_blank" rel="external">BlueLake主题</a>写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p>
<p>在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<blockquote>
<p>需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<code><strong>根_config.yml</strong></code>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。</p>
</blockquote>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>您可以直接到<a href="https://github.com/Jasmine-love/hexo-theme-BlueLake" target="_blank" rel="external">BlueLake发布</a>页下载，然后解压拷贝到themes目录下，修改配置即可。<br>不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。</p>
<h3 id="1-1-安装主题"><a href="#1-1-安装主题" class="headerlink" title="1.1 安装主题"></a>1.1 安装主题</h3><p>在根目录下打开终端窗口：</p>
<p>git bash</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</div></pre></td></tr></table></figure>
<h3 id="1-2-安装主题渲染器"><a href="#1-2-安装主题渲染器" class="headerlink" title="1.2 安装主题渲染器"></a>1.2 安装主题渲染器</h3><p>BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-renderer-jade --save</div><div class="line">$ npm install hexo-renderer-stylus --save</div></pre></td></tr></table></figure>
<h3 id="1-3-启用主题"><a href="#1-3-启用主题" class="headerlink" title="1.3 启用主题"></a>1.3 启用主题</h3><p>打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: BlueLake</div></pre></td></tr></table></figure>
<h3 id="1-4-验证"><a href="#1-4-验证" class="headerlink" title="1.4 验证"></a>1.4 验证</h3><p>首先启动 Hexo 本地站点，并开启调试模式：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s --debug</div></pre></td></tr></table></figure>
<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
<p>此时即可使用浏览器访问 <a href="http://localhost:4000，检查站点是否正确运行。" target="_blank" rel="external">http://localhost:4000，检查站点是否正确运行。</a></p>
<h3 id="1-5-更新主题"><a href="#1-5-更新主题" class="headerlink" title="1.5 更新主题"></a>1.5 更新主题</h3><p>今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/BlueLake</div><div class="line">git pull</div></pre></td></tr></table></figure>
<h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><h3 id="2-1-配置网站头部显示文字"><a href="#2-1-配置网站头部显示文字" class="headerlink" title="2.1 配置网站头部显示文字"></a>2.1 配置网站头部显示文字</h3><p>打开<code>根_config.yml</code>，找到：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: </div><div class="line">subtitle: </div><div class="line">description:</div><div class="line">about:</div></pre></td></tr></table></figure>
<p>title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlueLake主题&lt;/a&gt;写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>缓存</title>
    <link href="http://yoursite.com/2017/05/24/newBlog/"/>
    <id>http://yoursite.com/2017/05/24/newBlog/</id>
    <published>2017-05-24T09:43:48.000Z</published>
    <updated>2017-05-24T09:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端用到的的缓存一般有三种Cookie, LocalStorage 与 SessionStorage</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右，是网景公司的前雇员 Lou Montulli 在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。</p>
<h2 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h2><p>localStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储，而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今，localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+，那以 userData 作为你的 polyfill 的方案是种不错的选择。</p>
<h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><p>sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，sessionStorage 中的数据就会被清空。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端用到的的缓存一般有三种Cookie, LocalStorage 与 SessionStorage&lt;/p&gt;
&lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo 介绍</title>
    <link href="http://yoursite.com/2017/05/24/hello-world/"/>
    <id>http://yoursite.com/2017/05/24/hello-world/</id>
    <published>2017-05-24T09:04:57.390Z</published>
    <updated>2017-05-24T09:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
