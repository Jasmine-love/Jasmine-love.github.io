[{"title":"前端规范","date":"2018-05-22T03:19:27.000Z","path":"2018/05/22/前端规范/","text":"为了使代码更加简明、易读，团队中的每个人都应该遵循写好的前端规范，这样，即使把代码交给另一个人，他也可以很快的进入状态。 命名规则项目命名全部采用小写方式，以下划线分隔。例如：my_project 目录命名目录命名可以参照项目命名，全部采用小写方式，有复数结构时，要采用复数命名的方法。例如：scripts，images，styles常用的目录有： styles —— 样式表scripts —— js表imgs —— 图片目录libs —— 引入插件存放目录videos —— 视频目录 其他文件命名目录命名可以参照项目命名，全部采用小写方式。例如：index.js，product_detail.js，product_detail.css，product_detail.html。 HTML1.统一缩进使用soft tab（4个空格）；2.嵌套的节点应该缩进；3.在属性上，使用双引号，不要使用单引号；4.属性名全小写，用中划线做分隔符；5.不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）；6.不要忽略可选的关闭标签，例： 和 ；7.HTML5 doctype:在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；虽然doctype不区分大小写，但是按照惯例，doctype大写 （关于html属性，大写还是小写）。8.字符编码:通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为’UTF-8’;9.lang属性:应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译;10.IE兼容模式:用 标签可以指定页面应该用什么版本的IE来渲染；11.引入CSS, JS:根据HTML5规范, 通常在引入CSS和JS时不需要指明 type，因为 text/css 和 text/javascript 分别是他们的默认值。HTML5 规范链接: 使用link 使用style 使用script123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang=\"en-us\"&gt; &lt;head&gt; &lt;title&gt;Page title&lt;/title&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"&gt; &lt;!-- External CSS --&gt; &lt;link rel=\"stylesheet\" href=\"code_guide.css\"&gt; &lt;!-- In-document CSS --&gt; &lt;style&gt; ... &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;img src=\"images/company_logo.png\" alt=\"Company\"&gt; &lt;h1 class=\"hello-world\"&gt;Hello, world!&lt;/h1&gt; &lt;!-- External JS --&gt; &lt;script src=\"code_guide.js\"&gt;&lt;/script&gt; &lt;!-- In-document JS --&gt; &lt;script&gt; ... &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; CSS文件规范1.文件均归档至约定的目录中。例如： 重置样式：reset.css主要的 master.css模块 module.css基本共用 base.css/commen.css布局、版面 layout.css主题 themes.css专栏 columns.css文字 font.css表单 forms.css补丁 mend.css打印 print.css 2.文件引入可通过外联或内联方式引入。 外联方式：（类型声明type=”text/css”可以省略） 内联方式：（类型声明type=”text/css”可以省略） link和style标签都应该放入head中，原则上，不允许在html上直接写样式。避免在CSS中使用@import，嵌套不要超过一层。 3.文件名、文件编码及文件大小.文件名必须由小写字母、数字、中划线组成;文件必须用UTF-8编码，使用UTF-8（非BOM），在HTML中指定UTF-8编码，在CSS中则不需要特别指定因为默认就是UTF-8;单个CSS文件避免过大（建议少于300行）。 书写规范一、命名规则 class 名称中只能出现小写字符和破折号（dashe）（不是下划线，也不是驼峰命名法）。破折号应当用于相关 class 的命名（类似于命名空间）（例如，.btn 和 .btn-danger）。 不能用“_”下划线来命名CSS选择器，为什么呢？一些浏览器已经不允许使用下划线来命名CSS选择器（就是不兼容）； 避免过度任意的简写。.btn 代表 button，但是 .s 不能表达任何意思。 class 名称应当尽可能短，并且意义明确。 基于最近的父 class 或基本（base） class 作为新 class 的前缀。 使用 .js-* class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。 在为 Sass 和 Less 变量命名是也可以参考上面列出的各项规范。123456789/* Bad example */.t &#123; ... &#125;.red &#123; ... &#125;.header &#123; ... &#125;————/* Good example */.tweet &#123; ... &#125;.important &#123; ... &#125;.tweet-header &#123; ... &#125; 二、书写顺序1.位置属性(position, top, right, z-index, display, float等)2.大小(width, height, padding, margin)3.文字系列(font, line-height, letter-spacing, color- text-align等)4.背景(background, border等)5.其他(animation, transition等)如果使用CSS3的属性，如果有必要加入浏览器前缀，则按照 -webkit- / -moz- / -ms- / -o- / std的顺序进行添加，标准属性写在最后。链接的样式请严格按照如下顺序添加： a:link -&gt; a:visited -&gt; a:hover -&gt; a:active 目的：减少浏览器reflow（回流），提升浏览器渲染dom的性能。原理：浏览器的渲染流程为——①解析html构建dom树，解析css构建css树：将html解析成树形的数据结构，将css解析成树形的数据结构②构建render树：DOM树和CSS树合并之后形成的render树。③布局render树：有了render树，浏览器已经知道那些网页中有哪些节点，各个节点的css定义和以及它们的从属关系，从而计算出每个节点在屏幕中的位置。④绘制render树：按照计算出来的规则，通过显卡把内容画在屏幕上。css样式解析到显示至浏览器屏幕上就发生在②③④步骤，可见浏览器并不是一获取到css样式就立马开始解析而是根据css样式的书写顺序将之按照dom树的结构分布render样式，完成第②步，然后开始遍历每个树结点的css样式进行解析，此时的css样式的遍历顺序完全是按照之前的书写顺序。在解析过程中，一旦浏览器发现某个元素的定位变化影响布局，则需要倒回去重新渲染正如按照这样的书写书序：width: 100px;height: 100px;background-color: red ;position: absolute;当浏览器解析到position的时候突然发现该元素是绝对定位元素需要脱离文档流，而之前却是按照普通元素进行解析的，所以不得不重新渲染，解除该元素在文档中所占位置，然而由于该元素的占位发生变化，其他元素也可能会受到它回流的影响而重新排位。最终导致③步骤花费的时间太久而影响到④步骤的显示，影响了用户体验。所以规范的的css书写顺序对于文档渲染来说一定是事半功倍的！ 三、书写规范1、使用CSS缩写属性；CSS有些属性是可以缩写的，比如padding,margin,font等等，这样精简代码同时又能提高用户的阅读体验。2、去掉小数点前的“0”；3、16进制颜色代码缩写；有些颜色代码是可以缩写的，我们就尽量缩写吧，提高用户体验为主。 代码性能优化1、合并margin、padding、border的-left/-top/-right/-bottom的设置，尽量使用短名称。2、选择器应该在满足功能的基础上尽量简短，减少选择器嵌套，查询消耗。但是一定要避免覆盖全局样式设置。3、注意选择器的性能，不要使用低性能的选择器。4、禁止在css中使用*选择符。5、除非必须，否则，一般有class或id的，不需要再写上元素对应的tag。6、0后面不需要单位，比如0px可以省略成0，0.8px可以省略成.8px。7、如果是16进制表示颜色，则颜色取值应该大写。8、如果可以，颜色尽量用三位字符表示，例如#AABBCC写成#ABC 。9、如果没有边框时，不要写成border:0，应该写成border:none 。10、尽量避免使用AlphaImageLoader 。11、在保持代码解耦的前提下，尽量合并重复的样式。12、background、font等可以缩写的属性，尽量使用缩写形式 。 字体规则1、为了防止文件合并及编码转换时造成问题，建议将样式中文字体名字改成对应的英文名字，如：黑体(SimHei) 宋体(SimSun) 微软雅黑 (Microsoft Yahei，几个单词中间有空格组成的必须加引号)2、字体粗细采用具体数值，粗体bold写为700，正常normal写为4003、font-size必须以px或pt为单位，推荐用px（注：pt为打印版字体大小设置），不允许使用xx-small/x-small/small/medium/large/x-large/xx-large等值4、为了对font-family取值进行统一，更好的支持各个操作系统上各个浏览器的兼容性，font-family不允许在业务代码中随意设置 其他规范1、不要轻易改动全站级CSS和通用CSS库。改动后，要经过全面测试。2、避免使用filter3、避免在CSS中使用expression4、避免过小的背景图片平铺。5、尽量不要在CSS中使用!important6、绝对不要在CSS中使用”*”选择符7、层级(z-index)必须清晰明确，页面弹窗、气泡为最高级（最高级为999），不同弹窗气泡之间可在三位数之间调整；普通区块为10-90内10的倍数；区块展开、弹出为当前父层级上个位增加，禁止层级间盲目攀比。8、背景图片请尽可能使用sprite技术, 减小http请求, 考虑到多人协作开发, sprite按照模块、业务、页面来划分均可。 CSS3属性支持度 常用的CSS命名规则 头：header内容：content/container尾：footer导航：nav侧栏：sidebar栏目：column页面外围控制整体佈局宽度：wrapper左右中：left right center登录条：loginbar标志：logo广告：banner页面主体：main热点：hot新闻：news下载：download子导航：subnav菜单：menu子菜单：submenu搜索：search友情链接：friendlink页脚：footer版权：copyright滚动：scroll内容：content标签：tags文章列表：list提示信息：msg小技巧：tips栏目标题：title加入：joinus指南：guild服务：service注册：regsiter状态：status投票：vote合作伙伴：partner JS1，统一采用闭包的立即执行的方式，不要污染全局变量；123（funcction()&#123; // to do ... &#125;）(window) 2，不要污染全局变量，尽量采用局部变量的；12345678910111213141516171819;（function()&#123; 不规范的书写方式： var name = 'andy'; var age = 'lcuy'; .... function createNums(params) &#123; var sex = 'boy'; var city = 'BeiJing'; ... &#125; 规范的书写方式： 统一的类型可以new 一个公共函数 function createPeople()&#123; var name = 'andy', age = 'lcuy', sex = 'boy', city = 'BeiJing'; &#125; &#125;）(window)； 3，为了区分全局变量和局部变量，书写方式如下：全局变量采用 $ 符：如 var $name = ‘andy’;局部变量采用 _ 符：如 var _age = ‘30’;4，不要想当然的创建过多的函数，统一放到一个位置，或在原型里添加： 若是构造函数，首字母要大写1234567891011121314151617181920212223var Union_config = function()&#123; create:function()&#123; var Union_config = function()&#123; init:function()&#123; // 初始化函数 .... &#125;, sumbit:function()&#123; // 提交表单信息 ... &#125;, ... ... &#125;; return Union_config; &#125; &#125;; var myUnion = Union_config.create(); // 调用函数 以下可以按需调用函数方法；myUnion.sumbit(); ... 5，注释！！！－－－为了方便其它同事，自己写代码的时候一定要写注释； 若是定义的全局注释或者函数等注释采用标准等文档注释；如：1234/**@zJquery 通用js库 * @author huangzhao * * .... * */ 6，链式调用以及其它用法12345如： $('.div1').html(''); $('.div2').html(''); 可以写成： $('.div1,.div2').html(''); 如： $('.div1').css('color','red'); $('.div1').addClass('active'); 可以写成： $('.div1').css('color','red').addClass('active'); 7，函数命名统一采用驼峰命名法，如：createNums()；8，规范定义JSON对象，补全双引号 对于JSON数据，我们推荐采用标准地书写格式，方便查看；1如：&#123;name:'andy',age:'18'&#125; 改成 &#123;\"name\":\"andy\",\"age\":\"17\"&#125; 10，用“＝＝＝“取代“＝＝“前者是严格判断，后者会进行隐式的类型转换；11，关于for循环性能体验1234567891011var myarr = [\" \" \" \" \" ];for(var i=0;i&lt;myarr.length;i++)&#123;//此写法性能一般；&#125;for(var i=0,len=myarr.length;i&lt;len;i++)&#123;//此写法性能良好&#125;for(var i=0,val;val = myarr[i++])&#123; console.log(i,val);//此写法性能好－－－推荐使用&#125; 12，统一使用缩进大小，以tab为基准；13，var 的时候若有常量，全用大写；如 var KPI = 123;14, js中避免过多的DOM操作，需创建文档片段；数据较多的时候，会影响性能，如下：1234567for(var i=0;i&lt;500;i++)&#123; var _span = document.createElement('span'); var _text = document.createTextNode(i); _span.appendChild(_text); document.body.appendChild(_span);&#125; 通过创建文档片段来优化性能：如下：12345678var $frgment = document.createDocumentFragment();for(var i=0,len=500;i&lt;len;i++)&#123; var _span = document.createElement('span'), _text = document.createTextNode(i); _span.appendChild(_text); $frgment.appendChild(_span);// 先添加到文档片段中&#125;document.body.appendChild($frgment);// 最后再绑定给要赋予的元素 15, 如何处理onload事件要执行的多个函数？12345678function createNumA()&#123; console.log(1);&#125;function createNumB()&#123; console.log(2);&#125;window.onload = createNumA;//这个不会执行，被下面的覆盖了；window.onload = createNumB;//当然，这个可以执行，覆盖了上面的onload事件 123456// 解决方法1：可以用隐式函数----此方法比较常见，便于理解window.onload = function()&#123; //都会被执行 createNumA(); createNumB();&#125;; 123456789101112131415// 解决方法2:function addEventOnload(func)&#123; var oldOnload = window.onload; if(typeof window.onload != 'function')&#123; window.onload = func; &#125;else&#123; window.onload = function()&#123; oldOnload(); func(); &#125;; &#125;&#125;// 调用方法addEventOnload(createNumA);addEventOnload(createNumB); 16，js代码要做到高内聚/低耦合！高内聚：就是指某个系统模块有一段相关行很强的代码组成，只负责一项任务开发，俗称“单一责任原则”； 低耦合：一段完整的js代码，模块与模块之间尽可能独立存在，原因是可能每个模块处理的js代码功能不同。模块与模块之间的接口尽量也少而简单。如果某个模块比较大，尽量拆分来做，便于修改以及调用； 例如：1234567891011121314151617181920212223// 阶乘函数function factorial(num)&#123; if(num &lt;= 1 )&#123; return 1; &#125;else&#123; return num * factorial(num-1); &#125;&#125;;factorial(3);console.log(factorial(3));// 6=1*2*3// 上面的函数，这样定义没有问题，但问题是这个函数的执行与函数名factorail紧紧耦合在了一起。// 为了消除这种紧密耦合的现象，用arguments.callee来解决function factorial(num)&#123; if(num &lt;= 1)&#123; return 1; &#125;else&#123; return num * arguments.callee(num-1); &#125;&#125;/* 注意：在函数内部，有两个特殊的对象，arguments和this 虽然，arguments的主要用途是保存函数参数，但这个对象有个名叫callee的属性， 该属性是一个指针，指向拥有arguments对象的函数*/ 17， 定义多个函数的时候，如果参数相同，可以用apply()和call()改变环境对象，得到引用123456789101112131415161718192021222324252627每个函数都包括非继承而来的方法，apply()和call(); apply()和call()方法相同，区别在于接受的参数不同而已； function sum(num1,num2)&#123; return num1 + num2; &#125; function callSum(num1,num2)&#123; return sum.apply(this,arguments); &#125; function callSum1(num1,num2)&#123; return sum.apply(this,[num1,num2]); &#125; function callSum2(num1,num2)&#123; return sum.call(this,num1,num2); &#125; console.log(callSum(10,10)); //10 console.log(callSum1(10,10)); //10 console.log(callSum2(10,10)); //10 // 但是，传递参数并不是apply()和call()的真正用武之地，他们真正的强大的地方是能够扩充函数赖以运行的作用域 window.color = 'red'; var $o = &#123;\"color\":\"blue\"&#125;; function sayColor()&#123; console.log(this.color); &#125; sayColor();//red sayColor.call(this);//red sayColor.call(window);//red sayColor.call($o);//blue 18，不要使用eval()函数原因：1），性能差；2），不能打断点调试；3），容易受到攻击；4），可读性差；5），优化概率低；","tags":[]},{"title":"如何展示github中的demo","date":"2018-05-04T07:46:50.000Z","path":"2018/05/04/如何展示github中的demo/","text":"为了方便，我把项目代码托管到github上了，但是在这里相信大家都会遇到，打开一个HTML页面，呈现在大家面前的是代码形式的，而不是网页中看到的。可是自己想在网上看到自己仓库中的demo(也就是网页的效果)。我们可以通过以下办法来实现。 1、找到项目所在仓库，点击进入 2、点击settings，并进入 3、找到githubPages点击none,切换到master branch，save保存切换到master branch点击保存 4、点击链接保存，之后，在githubPages这里会出现一个链接，点击链接。你会进入一个网页，网页显示的正是现在的这个项目，想看哪一页，直接在后面添加相应目录即可，如：打开about.html，直接在链接后面添加about.html即可，eg: http://qqself.space/myself/about.html","tags":[]},{"title":"git提交项目至github","date":"2018-05-03T06:52:18.000Z","path":"2018/05/03/git提交项目至github/","text":"1、（先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库1git init 2、把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件1git add . 3、用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明1git commit -m 'first commit' 4、关联到远程库12git remote add origin 你的远程库地址例如：git remote add origin https://github.com/cade8800/ionic-demo.git 远程库地址获取方式 5、获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）1git pull --rebase origin master 6、把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。1git push -u origin master 7、状态查询命令1git status 备：详细请参考 http://www.cnblogs.com/tugenhua0707/p/4050072.html","tags":[]},{"title":"H5项目常见问题汇总及解决方案","date":"2017-12-22T08:29:49.000Z","path":"2017/12/22/H5项目常见问题汇总及解决方案/","text":"转载自http://www.qdfuns.com/notes/19075/63b3c42852852d29ff7197c53183f0ee.html H5项目常见问题及注意事项Meta基础知识： H5页面窗口自动调整到设备宽度，并禁止用户缩放页面 1234567891011121314151617181920212223//一、HTML页面结构&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\" /&gt;// width 设置viewport宽度，为一个正整数，或字符串‘device-width’// height 设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置// initial-scale 默认缩放比例，为一个数字，可以带小数// minimum-scale 允许用户最小缩放比例，为一个数字，可以带小数// maximum-scale 允许用户最大缩放比例，为一个数字，可以带小数// user-scalable 是否允许手动缩放//二、JS动态判断var phoneWidth = parseInt(window.screen.width);var phoneScale = phoneWidth/640;var ua = navigator.userAgent;if (/Android (\\d+\\.\\d+)/.test(ua))&#123; var version = parseFloat(RegExp.$1); if(version&gt;2.3)&#123; document.write('&lt;meta name=\"viewport\" content=\"width=640, minimum-scale = '+phoneScale+', maximum-scale = '+phoneScale+', target-densitydpi=device-dpi\"&gt;'); &#125;else&#123; document.write('&lt;meta name=\"viewport\" content=\"width=640, target-densitydpi=device-dpi\"&gt;'); &#125;&#125; else &#123; document.write('&lt;meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\"&gt;');&#125; H5空白页基本meta标签 12345678&lt;!-- 设置缩放 --&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no, minimal-ui&quot; /&gt;&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;&lt;meta name=&quot;format-detection&quot;content=&quot;telephone=no, email=no&quot; /&gt; PC端基础meta标签 1234567891011121314151617&lt;!-- 页面关键词--&gt;&lt;meta name=&quot;keywords&quot; content=&quot;your tags&quot; /&gt;&lt;!-- 页面描述--&gt;&lt;meta name=&quot;description&quot; content=&quot;150 words&quot; /&gt;&lt;!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。--&gt;&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt;&lt;!-- all：文件将被检索，且页面上的链接可以被查询； none：文件将不被检索，且页面上的链接不可以被查询； index：文件将被检索； follow：页面上的链接可以被查询； noindex：文件将不被检索； nofollow：页面上的链接不可以被查询。 --&gt; &lt;!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。--&gt; &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=&quot; /&gt; 页面缓存设置 1234&lt;!-- 清除缓存 --&gt;&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt; 其他meta标签 123456789101112131415161718192021222324252627&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;&lt;!-- 避免IE使用兼容模式 --&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;&lt;!-- 微软的老式浏览器 --&gt;&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;&lt;!-- uc强制竖屏 --&gt;&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;&lt;!-- QQ强制竖屏 --&gt;&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;&lt;!-- UC强制全屏 --&gt;&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;&lt;!-- QQ强制全屏 --&gt;&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;&lt;!-- UC应用模式 --&gt;&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;&lt;!-- QQ应用模式 --&gt;&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;&lt;!-- windows phone 点击无高光 --&gt;&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;&lt;meta name=&quot;author&quot; content=&quot;author name&quot; /&gt; &lt;!-- 定义网页作者 --&gt;&lt;meta name=&quot;google&quot; content=&quot;index,follow&quot; /&gt;&lt;meta name=&quot;googlebot&quot; content=&quot;index,follow&quot; /&gt;&lt;meta name=&quot;verify&quot; content=&quot;index,follow&quot; /&gt; 常见问题： 移动端如何定义字体font-family 1234567891011121314151617@ --------------------------------------中文字体的英文名称@ 宋体 SimSun@ 黑体 SimHei@ 微信雅黑 Microsoft Yahei@ 微软正黑体 Microsoft JhengHei@ 新宋体 NSimSun@ 新细明体 MingLiU@ 细明体 MingLiU@ 标楷体 DFKai-SB@ 仿宋 FangSong@ 楷体 KaiTi@ 仿宋_GB2312 FangSong_GB2312@ 楷体_GB2312 KaiTi_GB2312 @@ 说明：中文字体多数使用宋体、雅黑，英文用Helveticabody &#123; font-family: Microsoft Yahei,SimSun,Helvetica; &#125; 打电话发短信写邮件怎么实现 1234567891011121314151617181920212223242526// 一、打电话&lt;a href=\"tel:0755-10086\"&gt;打电话给:0755-10086&lt;/a&gt;// 二、发短信，winphone系统无效&lt;a href=\"sms:10086\"&gt;发短信给: 10086&lt;/a&gt;// 三、写邮件//注：在添加这些功能时，第一个功能以\"?\"开头，后面的以\"&amp;\"开头//1.普通邮件&lt;a href=\"mailto:863139978@qq.com\"&gt;点击我发邮件&lt;/a&gt;//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）&lt;a href=\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net\"&gt;点击我发邮件&lt;/a&gt;//3.跟着抄送地址后，写上&amp;bcc=,可添加密件抄送地址（Android存在兼容问题）&lt;a href=\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=384900096@qq.com\"&gt;点击我发邮件&lt;/a&gt;//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址&lt;a href=\"mailto:863139978@qq.com;384900096@qq.com\"&gt;点击我发邮件&lt;/a&gt;//5.包含主题，用?subject=&lt;a href=\"mailto:863139978@qq.com?subject=邮件主题\"&gt;点击我发邮件&lt;/a&gt;//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行&lt;a href=\"mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来\"&gt;点击我发邮件&lt;/a&gt;//7.内容包含链接，含http(s)://等的文本自动转化为链接&lt;a href=\"mailto:863139978@qq.com?body=http://www.baidu.com\"&gt;点击我发邮件&lt;/a&gt;//8.内容包含图片（PC不支持）&lt;a href=\"mailto:863139978@qq.com?body=&lt;img src='images/1.jpg' /&gt;\"&gt;点击我发邮件&lt;/a&gt;//9.完整示例&lt;a href=\"mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=993233461@qq.com&amp;subject=[邮件主题]&amp;body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A&lt;img src='images/1.jpg' /&gt;\"&gt;点击我发邮件&lt;/a&gt; 移动端touch事件（区分webkit和winphone） 123456789101112131415161718192021222324/* 当用户手指放在移动设备在屏幕上滑动会触发的touch事件 */// 以下支持webkittouchstart——当手指触碰屏幕时候发生。不管当前有多少只手指touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动touchend——当手指离开屏幕时触发touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用//TouchEvent说明：touches：屏幕上所有手指的信息targetTouches：手指在目标区域的手指信息changedTouches：最近一次触发该事件的手指信息touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息//参数信息(changedTouches[0])clientX、clientY在显示区的坐标target：当前元素//事件响应顺序ontouchstart &gt; ontouchmove &gt; ontouchend &gt; onclick// 以下支持winphone 8MSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指MSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html&#123;-ms-touch-action: none;&#125;可以阻止默认情况的发生：阻止页面滚动MSPointerUp——当手指离开屏幕时触发 移动端click屏幕产生200-300ms的延时响应 123456789101112说明：移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。以下是历史原因，来源一个公司内一个同事的分享：2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。//解决方案：fastclick可以解决在手机上点击事件的300ms延迟zepto的touch模块，tap事件也是为了解决在click的延迟问题 Rentina显示屏原理及设计方案 1234567891011121314151617说明：retina屏是一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个。在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍。那么，前端的应对方案是：设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2//例如图片宽高为：200px*200px，那么写法如下.css&#123;width:100px;height:100px;background-size:100px 100px;&#125;//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px.css&#123;font-size:20px&#125;//image-set设计Rentina背景图image-set,webkit私有属性，也是CSS4的属性，为解决Rentina屏幕下的图像而生。.css &#123; background: url(images/bg.jpg) no-repeat center; background: -webkit-image-set( url(images/bg.jpg) 1x, //支持image-set普通屏 url(images/bg-2x.jpg) 2x); //支持image-set的Rentinan&#125; 点击元素产生背景或边框怎么去掉 123456789101112//ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；//winphone系统,点击标签产生的灰色半透明背景，能通过设置&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;去掉；//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签a,button,input,textarea &#123; -webkit-tap-highlight-color: rgba(0,0,0,0); -webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符&#125; // 也可以* &#123; -webkit-tap-highlight-color: rgba(0,0,0,0); &#125;//winphone下&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt; 美化表单元素 123456789101112131415//一、使用appearance改变webkit浏览器的默认外观input,select &#123; -webkit-appearance:none; appearance: none; &#125;//二、winphone下，使用伪元素改变表单元素默认外观//1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰select::-ms-expand &#123; display:none; &#125;//2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰input[type=radio]::-ms-check,input[type=checkbox]::-ms-check &#123; display:none; &#125;//3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰input[type=text]::-ms-clear,input[type=tel]::-ms-clear,input[type=number]::-ms-clear &#123; display:none; &#125; 移动端字体单位font-size选择px还是rem 1234// 如需适配多种移动设备，建议使用rem。以下为参考值：html &#123; font-size: 62.5%; &#125; //10*16 = 62.5%//设置12px字体 这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级body &#123; font-size:12px; font-size:1.2rem; &#125; 超实用的CSS样式 123456789101112131415161718192021222324252627282930313233//去掉webkit的滚动条——display: none;//其他参数::-webkit-scrollba //滚动条整体部分::-webkit-scrollbar-thumb //滚动条内的小方块::-webkit-scrollbar-track //滚动条轨道::-webkit-scrollbar-button //滚动条轨道两端按钮::-webkit-scrollbar-track-piece //滚动条中间部分，内置轨道::-webkit-scrollbar-corner //边角，两个滚动条交汇处::-webkit-resizer //两个滚动条的交汇处上用于通过拖动调整元素大小的小控件// 禁止长按链接与图片弹出菜单a,img &#123; -webkit-touch-callout: none &#125; // 禁止ios和android用户选中文字html,body &#123;-webkit-user-select:none; user-select: none; &#125;// 改变输入框placeholder的颜色值::-webkit-input-placeholder &#123; /* WebKit browsers */color: #999; &#125;:-moz-placeholder &#123; /* Mozilla Firefox 4 to 18 */color: #999; &#125;::-moz-placeholder &#123; /* Mozilla Firefox 19+ */color: #999; &#125;:-ms-input-placeholder &#123; /* Internet Explorer 10+ */color: #999; &#125;input:focus::-webkit-input-placeholder&#123; color:#999; &#125;// android上去掉语音输入按钮input::-webkit-input-speech-button &#123;display: none&#125;// 阻止windows Phone的默认触摸事件/*说明：winphone下默认触摸事件事件使用e.preventDefault是无效的，可通过样式来禁用，如：*/html &#123; -ms-touch-action:none; &#125; //禁止winphone默认触摸事件 取消input在ios下，输入的时候英文首字母的默认大写 1&lt;input autocapitalize=\"off\" autocorrect=\"off\" /&gt; 手机拍照和上传图片 123//IOS有拍照、录像、选取本地图片功能，部分Android只有选择本地图片功能。Winphone不支持&lt;input type=&quot;file&quot; accept=&quot;images/*&quot; /&gt;&lt;input type=&quot;file&quot; accept=&quot;video/*&quot; /&gt; 屏幕旋转的事件和样式 1234567891011121314151617181920//JS处理function orientInit()&#123; var orientChk = document.documentElement.clientWidth &gt; document.documentElement.clientHeight?&apos;landscape&apos;:&apos;portrait&apos;; if(orientChk ==&apos;lapdscape&apos;)&#123; //这里是横屏下需要执行的事件 &#125;else&#123; //这里是竖屏下需要执行的事件 &#125;&#125;orientInit();window.addEventListener(&apos;onorientationchange&apos; in window?&apos;orientationchange&apos;:&apos;resize&apos;, function()&#123; setTimeout(orientInit, 100);&#125;,false)//CSS处理//竖屏时样式@media all and (orientation:portrait)&#123; &#125;//横屏时样式@media all and (orientation:landscape)&#123; &#125; audio元素和video元素在ios和andriod中无法自动播放 1234567891011121314151617181920212223//音频，写法一&lt;audio src=&quot;music/bg.mp3&quot; autoplay loop controls&gt;你的浏览器还不支持哦&lt;/audio&gt;//音频，写法二&lt;audio controls=&quot;controls&quot;&gt; &lt;source src=&quot;music/bg.ogg&quot; type=&quot;audio/ogg&quot;&gt;&lt;/source&gt; &lt;source src=&quot;music/bg.mp3&quot; type=&quot;audio/mpeg&quot;&gt;&lt;/source&gt; 优先播放音乐bg.ogg，不支持在播放bg.mp3&lt;/audio&gt;//JS绑定自动播放（操作window时，播放音乐）$(window).one(&apos;touchstart&apos;, function()&#123; music.play();&#125;)//微信下兼容处理document.addEventListener(&quot;WeixinJSBridgeReady&quot;, function () &#123; music.play();&#125;, false);//小结//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间 重力感应事件 1234567891011121314151617181920212223242526// 运用HTML5的deviceMotion，调用重力感应事件if(window.DeviceMotionEvent)&#123; document.addEventListener(&apos;devicemotion&apos;, deviceMotionHandler, false)&#125;var speed = 30;var x = y = z = lastX = lastY = lastZ = 0;function deviceMotionHandler(eventData)&#123; var acceleration = event.accelerationIncludingGravity; x = acceleration.x; y = acceleration.y; z = acceleration.z; if(Math.abs(x-lastX)&gt;speed || Math.abs(y-lastY)&gt;speed || Math.abs(z-lastZ)&gt;speed )&#123; //这里是摇动后要执行的方法 yaoAfter(); &#125; lastX = x; lastY = y; lastZ = z;&#125;function yaoAfter()&#123; //do something&#125;//说明：说见案例摇一摇效果中yao.js 微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整 123456789101112131415161718192021//以下代码可使Android机页面不再受用户字体缩放强制改变大小，但是会有1S左右延时，期间可以考虑loading来处理if (typeof(WeixinJSBridge) == &quot;undefined&quot;) &#123; document.addEventListener(&quot;WeixinJSBridgeReady&quot;, function (e) &#123; setTimeout(function()&#123; WeixinJSBridge.invoke(&apos;setFontSizeCallback&apos;, &#123; &apos;fontSize&apos;:0&#125;, function(res)&#123; alert(JSON.stringify(res)); &#125;) &#125;, 0) &#125;);&#125;else&#123; setTimeout(function()&#123; WeixinJSBridge.invoke(&apos;setFontSizeCallback&apos;, &#123; &apos;fontSize&apos;:0&#125;, function(res)&#123; alert(JSON.stringify(res)); &#125;) &#125;, 0)&#125;//IOS下可使用 -webkit-text-size-adjust禁止用户调整字体大小body &#123; -webkit-text-size-adjust:100%!important; &#125;//最好的解决方案：最好使用rem或百分比布局 定位的坑 1234567891011121314151617181920212223242526272829303132//fixed定位//1.ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位//2.android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位//3.ios4下不支持position:fixed//解决方案：使用[Iscroll](http://cubiq.org/iscroll-5)，如：&lt;div id=&quot;wrapper&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; ..... &lt;/ul&gt;&lt;/div&gt;&lt;script src=&quot;iscroll.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var myscroll; function loaded()&#123; myscroll=new iScroll(&quot;wrapper&quot;); &#125; window.addEventListener(&quot;DOMContentLoaded&quot;,loaded,false);&lt;/script&gt;//position定位//Android下弹出软键盘弹出时，影响absolute元素定位//解决方案:var ua = navigator.userAgent.indexOf(&apos;Android&apos;);if(ua&gt;-1)&#123; $(&apos;.ipt&apos;).on(&apos;focus&apos;, function()&#123; $(&apos;.css&apos;).css(&#123;&apos;visibility&apos;:&apos;hidden&apos;&#125;) &#125;).on(&apos;blur&apos;, function()&#123; $(&apos;.css&apos;).css(&#123;&apos;visibility&apos;:&apos;visible&apos;&#125;) &#125;)&#125; 播放视频不全屏 12345678&lt;!--1.ios7+支持自动播放2.支持Airplay的设备（如：音箱、Apple TV)播放x-webkit-airplay=\"true\"3.播放视频不全屏webkit-playsinline=\"true\"--&gt;&lt;video x-webkit-airplay=\"true\" webkit-playsinline=\"true\" preload=\"auto\" autoplay src=\"http://\"&gt;&lt;/video&gt; JS判断设备 12345678910111213function deviceType()&#123; var ua = navigator.userAgent; var agent = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;]; for(var i=0; i&lt;len,len = agent.length; i++)&#123; if(ua.indexOf(agent[i])&gt;0)&#123; break; &#125; &#125;&#125;deviceType();window.addEventListener(&apos;resize&apos;, function()&#123; deviceType();&#125;) JS判断微信浏览器 12345678function isWeixin()&#123; var ua = navigator.userAgent.toLowerCase(); if(ua.match(/MicroMessenger/i)==&apos;micromessenger&apos;)&#123; return true; &#125;else&#123; return false; &#125;&#125; android 2.3 bug 12345//1.@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉//2.after和before伪类无法使用动画animation//3.border-radius不支持%单位，如要兼容，可以给radius设置一下较大的值//4.translate百分比的写法和scale在一起会导致失效，例如：-webkit-transform: translate(-50%,-50%) scale(-0.5, 1) android 4.x bug 1234//1.三星 Galaxy S4中自带浏览器不支持border-radius缩写//2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分//3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色//4.android无法同时播放多音频audio 消除transition闪屏 12345.css &#123; -webkit-transform-style: preserve-3d; -webkit-backface-visibility: hidden; -webkit-perspective: 1000;&#125; 开启硬件加速 1234567//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。.css &#123; -webkit-transform: translate3d(0,0,0); -moz-transform: translate3d(0,0,0); -ms-transform: translate3d(0,0,0); transform: translate3d(0,0,0);&#125; 渲染优化 123456789//1.禁止使用iframe（阻塞父文档onload事件）//2.禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）//使用CSS3代码代替JS动画；//开启GPU加速；//使用base64位编码图片(不小图而言，大图不建议使用) // 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU。小图标优势在于： //1.减少HTTP请求； //2.避免文件跨域； //3.修改及时生效； 腾讯方案 123456789101112131415161718192021222324252627282930313233var autoScale = function()&#123; var ratio = 320/504, //这是设计稿的宽高比（504是Iphone的高度去掉标题栏高度） winW = document.getElement.clientWidth, winH = document.getElement.clientHeight, ratio2 = winW/winH, scale; if(ratio&lt;ratio2)&#123; scale = (winH/504).toString().substring(0, 6); &#125;else&#123; scale = (winW/320).toString().substring(0, 6); &#125; var cssText = '-webkit-transform: scale('+scale+');-webkit-transform-origin: top; opacity:1;' $('.wrap').attr('style', cssText);&#125;setTimeout(function()&#123; if(document.documentElement.clientWidth/document.documentElement.clientHeight !== 320/504)&#123; autoScale(); &#125;else&#123; $('.page').css(&#123;'opacity': 1&#125;); &#125;&#125;, 300) //添加一定时长以确保宽高获取正确window.addEventListener('onorientationchange' in window?'orientationchange':'resize', autoScale, false)&#123; detectOrientatioin();&#125; //切换横竖屏function detectOrientatioin()&#123; if(window.orientation==180 || window.orientation==0)&#123; //竖屏 &#125; if(window.orientation==90 || window.orientation==-90)&#123; //横屏 &#125;&#125; 常用的移动端框架zepto.js - [官网](http://zeptojs.com/) - [中文网](http://www.css88.com/doc/zeptojs_api/) - [浏览器检测](https://github.com/madrobby/zepto/blob/master/src/detect.js) - [tap事件](https://github.com/madrobby/zepto/blob/master/src/touch.js)","tags":[]},{"title":"写前端页面时的注意事项","date":"2017-12-20T09:32:21.000Z","path":"2017/12/20/写前端页面时的注意事项/","text":"注意兼容性要求无论你是甲方还是乙方，希望你在开始切页面之前，问清楚，这个网站是否要兼容性要求，要不你做的事兼容到了IE10，结果需求是要求到IE8，你是改不改。当然，如果你牛，你可以不改。 确认是自适应还是PC端随着科技产品的流行，人们在做网站是的要求也越来越高，不再只要求单一的手机端页面或是PC端页面，有可能是两者兼容，所以在开始之前，我们需要去确认清楚。反正我只不喜欢修改。 代码简洁明了简洁的代码，不仅对于自己来说容易检查复用,对于后台开发人员来说嵌套页面也很方便。","tags":[]},{"title":"开发过程中遇到的小问题","date":"2017-12-15T09:19:02.000Z","path":"2017/12/15/开发过程中遇到的小问题/","text":"1移动端输入六位密码 光标位置不对解决办法，把它移到看不见的地方12345input&#123; text-indent: -999em; margin-left: -100%; width: 200%!important; &#125; 2 textarea 文本域12resize: none; //禁止放大overflow-y: hidden; //进度条 3 打电话,发短信12&lt;a href=\"tel:0755-10086\"&gt;打电话给:0755-10086&lt;/a&gt;&lt;a href=\"sms:10086\"&gt;发短信给: 10086&lt;/a&gt; 4 可输入的div12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; div&#123; width:300px; border:1px solid #666; font-size:20px; color:blue; line-height:20px; outline: none; padding: 10px; &#125; div:empty:before&#123; content: attr(placeholder); color:#ccc; &#125; div:focus:before&#123; content:none; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div contenteditable=\"plaintext-only\" placeholder=\"请输入内容\"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 5 重定向重定向是网页制作中的一个知识，几个例子跟你说明，假设你现在所处的位置是一个论坛的登录页面，你填写了帐号，密码，点击登陆，如果你的帐号密码正确，就自动跳转到论坛的首页，不正确就返回登录页；这里的自动跳转，就是重定向的意思。或者可以说，重定向就是，在网页上设置一个约束条件，条件满足，就自动转入到其它网页、网址。 window.location.href = ‘goods_management.html?tab=audit’; 6 input文本框输入数字时，小数点后面只保留2位1234$('#goodsPrice').blur(function() &#123; var money = $(this).val() - 0.0; $(this).val(money.toFixed(2));&#125;); 7 刷新当前页面12window.location.reload()： //刷新当前页面&lt;meta http-equiv=\"refresh\" content=\"3600\"&gt; //1小时刷新一次 8 手机端首屏遇到的fixed问题（用手机浏览器浏览，我用的是QQ浏览器）最近做项目时遇到一个小问题，手机端首屏banner图fixed固定，当页面向上滑动时，banner图高度变了，由于banner图是用背景图做的，所以给人的感觉是banner图跳了一下，然后banner图显示全了，而原先是显示不全的。 滑动前(左图)后(右图)： 经过检查，发现是由于没有给固定高度，而是用100%的原因。","tags":[]},{"title":"兼容IE8需要考虑到的问题","date":"2017-12-15T03:36:52.000Z","path":"2017/12/15/兼容IE8需要考虑到的问题/","text":"在写页面时，其实最简单的是兼容到IE10及以上，这样的情况下，无论是PC、手机或者两者都兼容的响应式页面，基本不需要考虑兼容问题，处理起来容易多了。但是，现实和理想是有很大的差别的，随意我们需要考虑到IE8甚至更低的问题。 IE9（先来个简单的）IE9比较好说，因为css3，html5这些新的标签，属性，是支持IE9的，所以我们不需要为这些操心，只是对于我们用的一些框架留心一点。比如说轮播框架，当然有的人可能会说轮播用什么框架啊，自己写一个就好，很简单的。确实，不是很难，但是相对于一些成熟的框架来说，就显得比较单薄了。有时候用一些框架会比较更加简单，效果也会会更好。话说回来，就是轮播插件吧，swiper大家应该熟悉吧，手机，PC都可以用，用起来也挺简单的，但是，对于swiper3来说，他兼容到IE10，IE9用起来就不是很好用，所以使用的同学注意了，如果要兼容的话，可以用swiper2，它是准们针对PC的，兼容性挺好的。 IE8IE8需要考虑的东西就相对来说就比较多了。 背景图在切页面时，我们经常会用到background以及background-size,background-position等等，IE9及以上可以完美的兼容，但是到了IE8就悲催了，它可以使用background，可是对于background-size,background-position这些它就不认识了，所以我们得想办法解决，解决办法有两种：一、不要用背景图，直接使用img就OK了二、使用其他css123background-repeat:no-repeat\\9;background-image:none\\9;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='img/banner.png', sizingMethod='scale')\\9; 这样的话可以让背景图全部显示，记住是‘全都显示’，顾名思义就是大小不合适的话，就会变形了。 半透明背景色12345background-color:#000000;filter:Alpha(opacity=70);position:static; /* IE6、7、8只能设置position:static(默认属性) ，否则会导致子元素继承Alpha值 */*zoom:1; /* 激活IE6、7的haslayout属性，让它读懂Alpha */background-color: rgba(0,0,0,.7); html5语义化标签的兼容这个就比较简单了，直接引入一个js文件就解决了：html5shiv.js IE7伪类兼容伪类挺好用的，但是如果我用伪类写了一个横线，到IE7是不支持的，在网上查，说到IE6/7的时候伪类的写法和IE8是不同的，他们分别是这样的 1p:after,p after 但是我发现还是不能用，暂时没有办法。 盒模型大家用盒模型box-sizing: border-box;的时候是不是很爽啊，但是某一天客户说他们的产品要兼容到IE低级版本，在哪一刻是不是很崩溃啊，反正我是崩溃了，兼容到低级版本，怎么不早说啊！！！！但是胳膊拧不过大腿，我只能悲催的去改改改，各种的宽度啊，综合padding，margin重新计算。哭！！！","tags":[]},{"title":"ES6转码步骤","date":"2017-07-20T07:22:03.000Z","path":"2017/07/20/ES6转码步骤/","text":"能够实现 ES6 到 ES5 的代码转换多亏了 Babel (以前叫 6to5) 以及 Traceur 之类的项目。这些转换器 (更准确地说是源代码到源代码的编译器) 可以把你写的符合 ECMAScript 6 标准的代码完美地转换为 ECMAScript 5 标准的代码，并且可以确保良好地运行在所有主流 JavaScript 引擎中。 我们这里目前在使用 Babel，主要是因为它对 ES6 的支持程度比其它同类更高，而且 Babel 拥有完善的文档和一个很棒的在线交互式编程环境。 在转码之前，我们需要先安装环境。node.js和NPM的安装就不写了，没有安装的自己看官网安装，咱们来直接安装ES6转码工具。 安装 Babelsh npm install -g babel","tags":[]},{"title":"前端知识体系","date":"2017-07-18T10:13:59.000Z","path":"2017/07/18/前端知识体系/","text":"1. 布局框架：Bootstrap: http://getbootstrap.com/ Foundation: http://foundation.zurb.com/ Uikit: http://www.getuikit.com/ Web Components:http://css-tricks.com/modular-future-web-components// 2. 构建工具及包管理器：Grunt: http://gruntjs.com/ Yeoman: http://yeoman.io/ Bower: http://bower.io/ NPM: https://www.npmjs.org/ 3. 代码优化：Google Closure Compiler: CSS Lint: http://csslint.net/ JSHint: http://www.jshint.com/ JSLint: http://www.jslint.com/ 4. CSS预处理器Less: http://lesscss.org/ Sass: http://sass-lang.com/ 5. 调试工具：Chrome：https://developers.google.com/chrome-developer-tools/ Firebug: https://getfirebug.com/ HTTPWatch: http://www.httpwatch.com/ Fiddler: http://www.telerik.com/fiddler IE Developer Toolbar: Weinre: http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html 6. 文档工具：JSDoc: https://github.com/jsdoc3/jsdoc Jekyll: http://jekyllrb.com/ 7. IDE/文本编辑器WebStorm: http://www.jetbrains.com/webstorm/ 8. 移动端 手势事件库：GMU: http://gmu.baidu.com/ Hammer.js:&lt; http://eightmedia.github.io/hammer.js/&gt; QuoJS: http://quojs.tapquo.com/ Zepto: http://zeptojs.com/ Swipe: http://swipejs.com/ jQuery Mobile: http://jquerymobile.com/ KendoUI:http://www.telerik.com/kendo-ui Goratchet:http://goratchet.com/ 9. 思维导图XMind:http://www.xmind.net/ 10.模块加载器：ESL:&lt; https://github.com/ecomfe/esl&gt; RequireJS: http://requirejs.org/ SeaJS:http://seajs.org/docs/ 11. 项目管理:Github: https://github.com/ GitLab: https://about.gitlab.com/ Redmine: http://www.redmine.org/ 12. 原型设计:Axure RP: http://www.axure.com/ 13. 富互联网应用框架AngularJs: http://www.angularjs.org Backbone: http://backbonejs.org/ AmpersandJShttp://ampersandjs.com// Knockout: http://knockoutjs.com/ Underscore: http://underscorejs.org/ 14. 模板引擎EJS: http://www.embeddedjs.com/ Handlebars: http://handlebarsjs.com/ Jade: http://jade-lang.com/ Velocity: http://velocity.apache.org/ 15. 测试框架Jasmine: http://pivotal.github.io/jasmine/ QUnit: http://qunitjs.com/ mocha: http://visionmedia.github.io/mocha/ 16. 版本控制Git: http://git-scm.com/ Subversion: http://subversion.apache.org/ Mercurial(Hg): http://mercurial.selenic.com/ 17. WEB框架/服务器Node: http://nodejs.org/ Express: http://expressjs.com/ Apache: http://httpd.apache.org/ Nginx: http://nginx.org/ 18. CommonJSComponent: http://component.io/ 19. WEB安全XSS(跨站脚本攻击): CSRF(跨站点伪造请求攻击): 跨iframe攻击: Clickjacking安全漏洞: 20. 代码规范Code Guide: http://alloyteam.github.io/code-guide/ 编写可维护的CSS: http://segmentfault.com/a/1190000000388784/ GJS编码规范指南: http://alloyteam.github.io/JX/doc/specification/google-javascript.xml jQueryJS规范: http://contribute.jquery.org/style-guide/js/ 21. HTML模块化html5boilerplate: http://html5boilerplate.com/ 22. CSS模块化Normalize.css: http://necolas.github.io/normalize.css/ LESS:http://www.lesscss.net/ OOCSS:http://www.oocss.cc/ http://oocss.org/ CssReset:http://www.cssreset.com/ 23. HTML5 CanvasD3:http://d3js.org/ KINETIC:http://kineticjs.com/","tags":[]},{"title":"Browsersync-省时的浏览器同步测试工具","date":"2017-07-10T09:33:50.000Z","path":"2017/07/10/Browsersync-省时的浏览器同步测试工具/","text":"省时的浏览器同步测试工具Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。无论您是前端还是后端工程师，使用它将提高您30%的工作效率。有了它，您不用在多个浏览器、多个设备间来回切换，频繁的刷新页面。更神奇的是您在一个浏览器中滚动页面、点击等行为也会同步到其他浏览器和设备中，这一切还可以通过可视化界面来控制。 5分钟快速入门。1. 安装 Node.js BrowserSync是基于Node.js的, 是一个Node模块， 如果您想要快速使用它，也许您需要先安装一下Node.js 2. 安装 BrowserSync 您可以选择从Node.js的包管理（NPM）库中 安装BrowserSync。打开一个终端窗口，运行以下命令：1npm install -g browser-sync 您告诉包管理器下载BrowserSync文件，并在全局下安装它们，您可以在所有项目(任何目录)中使用。当然您也可以结合gulpjs或gruntjs构建工具来使用，在您需要构建的项目里运行下面的命令:1npm install --save-dev browser-sync 3. 启动 BrowserSync 一个基本用途是，如果您只希望在对某个css文件进行修改后会同步到浏览器里。那么您只需要运行命令行工具，进入到该项目（目录）下，并运行相应的命令： 静态网站如果您想要监听.css文件, 您需要使用服务器模式。 BrowserSync 将启动一个小型服务器，并提供一个URL来查看您的网站。12// --files 路径是相对于运行该命令的项目（目录） browser-sync start --server --files \"css/*.css\" 如果您需要监听多个类型的文件，您只需要用逗号隔开。例如我们再加入一个.html文件1234// --files 路径是相对于运行该命令的项目（目录） browser-sync start --server --files \"css/*.css, *.html\"// 如果你的文件层级比较深，您可以考虑使用 **（表示任意目录）匹配，任意目录下任意.css 或 .html文件。 browser-sync start --server --files \"**/*.css, **/*.html\" 我们做了一个静态例子的示范，您可以下载示例包，文件您可以解压任何盘符的任何目录下，不能是中文路径。打开您的命令行工具，进入到BrowsersyncExample目录下，运行以下其中一条命令。Browsersync将创建一个本地服务器并自动打开你的浏览器后访问http://localhost:3000地址，这一切都会在命令行工具里显示。你也可以查看[Browsersync静态示例视频](http://www.browsersync.cn/example/video/browsersync1.mp4)1234// 监听css文件 browser-sync start --server --files \"css/*.css\"// 监听css和html文件 browser-sync start --server --files \"css/*.css, *.html\" 动态网站 如果您已经有其他本地服务器环境PHP或类似的，您需要使用代理模式。 BrowserSync将通过代理URL(localhost:3000)来查看您的网站。12// 主机名可以是ip或域名browser-sync start --proxy \"主机名\" \"css/*.css\" 在本地创建了一个PHP服务器环境，并通过绑定Browsersync.cn来访问本地服务器，使用以下命令方式，Browsersync将提供一个新的地址localhost:3000来访问Browsersync.cn，并监听其css目录下的所有css文件。1browser-sync start --proxy \"Browsersync.cn\" \"css/*.css\"","tags":[]},{"title":"代码路上遇到的兼容性问题","date":"2017-07-05T09:32:42.000Z","path":"2017/07/05/代码路上遇到的兼容性问题/","text":"兼容问题估计是所有IT人员的一个眼中钉，它总是无声无息的出现，我们不能屏蔽它，只能尽力避免，当然避免的前提是我们对它有所了解。对于兼容问题我知道的也不是很多，只能有一个写一个，总会了解的越来越多，离它越来越远。 IE浏览器下image边框问题调过IE的都应该知道，在IE浏览器下，image会出现边框，当然这个是很好解决的1image&#123;border: none;&#125; 不同浏览器的标签默认的外补丁和内补丁不同随便写几个标签，不加样式控制的情况下，各自的margin 和padding差异较大。碰到频率:100%，这个也是很容易解决的1*&#123;margin:0;padding:0;&#125; 这个是最常见的也是最易解决的一个浏览器兼容性问题，几乎所有的css文件开头都会用通配符*来设置各个标签的内外补丁是0。 块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大90%（稍微复杂点的页面都会碰到，float布局最常见的浏览器兼容问题）,常见症状是ie6中后面的一块被顶到下一行在float的标签样式控制中加入 display:inline;将其转化为行内属性 图片默认有间距几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题一中提到的通配符也不起作用。使用float属性为img布局。因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。其实不仅仅是图片会出现这种情况，凡是行内块元素都会出现这种情况","tags":[]},{"title":"Grunt 自动化","date":"2017-07-05T06:51:26.000Z","path":"2017/07/05/Grunt-自动化/","text":"Grunt(文档中心https://gruntjs.com/),是一种自动化任务处理器，他就是一个工具框架，有很多插件扩展它的功能。 我学习这个也是从别人的博客上看的，当然人家的比我的详细多了，我这里基本也是粘贴复制的，在这里附上博客地址http://yujiangshui.com/grunt-basic-tutorial/，我这一篇纯粹是写给自己看的，因为记性不好，常常忘记该怎么做，因此把常用命令以博客的形式写下来，方便自己回顾。 Grunt基于Node.js，用JS开发，这样就可以借助Node.js实现跨系统平台的桌面端的操作，例如文档操作等等。此外，Grunt以及它的插件们，都作为一个包，可以用NPM安装进行管理。 所以 NPM 生成的 package.json 项目文件，里面可以记录当前项目中用到的 Grunt 插件，而 Grunt 会调用 Gruntfile.js 这个文件，解析里面的任务（task）并执行相应操作。 如果你对 Node.js、NPM 这些名词不太熟悉，建议先去搜索了解一下，因为下面的命令会涉及到它们，但是本文不会过多介绍。 安装 GruntGrunt 依赖 Node.js 所以在安装之前确保你安装了 Node.js。然后开始安装 Grunt。 实际上，安装的并不是 Grunt，而是 Grunt-cli，也就是命令行的 Grunt，这样你就可以使用 grunt 命令来执行某个项目中的 Gruntfile.js 中定义的 task 。但是要注意，Grunt-cli 只是一个命令行工具，用来执行，而不是 Grunt 这个工具本身。 安装 Grunt-cli 需要使用 NPM，使用下面一行即可在全局范围安装 Grunt-cli ，换句话说，就是你可以在任何地方执行 grunt 命令： 1npm install -g grunt-cli 这个 package.json 文件其实是 Node.js 来描述一个项目的文件，JSON 格式。生成这个文件超级简单，推荐用命令行交互式的生成一下： 打开命令行，cd gruntxx 文件夹下面，输入指令 npm init 之后，就出来很多信息，然后开始填写项目名称，填写好了之后回车即可。其实这里你一路回车下去也无妨，但是建议你细细的填一下，不明白的跳过好了。 npm init 填写项目信息1npm init 填写好了之后，查看目录就会发现生成 package.json 文件了，这样就算生成好了。 其实就是一个文件而已，你觉得这种方式麻烦，完全可以新建一个文件，然后将类似下面的代码复制进去，改一下对应选项，保存成 package.json 文件就可以：123456&#123; \"name\": \"my-project-name\", \"version\": \"0.1.0\", \"devDependencies\": &#123; &#125;&#125; 但这时我们还没有在项目文件中安装 Grunt 以及相关任务插件。 安装 Grunt 和所需要的插件一般需要用到： 合并文件：grunt-contrib-concat 语法检查：grunt-contrib-jshint Scss 编译：grunt-contrib-sass Less 编译：grunt-contrib-less 压缩文件：grunt-contrib-uglify 监听文件变动：grunt-contrib-watch 建立本地服务器：grunt-contrib-connect 它们的命名和文档都很规范，因为这些是官方提供的比较常用的插件。这些插件同时都是 NPM 管理的包，比如 grunt-contrib-concat - npm 你也可以在这上面看到用法等。 下面我们就要在这个项目中安装这些插件，执行命令：1npm install grunt --save-dev 表示通过 npm 安装了 grunt 到当前项目，同时加上了 –save-dev 参数，表示会把刚安装的东西添加到 package.json 文件中。不信你打开 package.json 文件看下，是不是多了123\"devDependencies\": &#123; \"grunt\": \"^0.4.5\"&#125; 没错，这个的意思就是当前项目依赖 grunt，后面是它的版本，咱们不用管。如果安装的时候没有添加 –save-dev 参数，这里就不会出现了，你需要自行添加上去。 下面我们来安装 Grunt 的插件，当然，不需要一个个的安装，太麻烦了，我们可以：123npm install -g grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect grunt-contrib-less grunt-contrib-cssminnpm install --save-dev grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect grunt-contrib-less grunt-contrib-cssmin 配置 Gruntfile.js 的语法插件也装好了，开始写任务吧！既然是要程序来读取执行，必要要有一定的语法规范，下面来简单的说一下： 首先要明白，这是一个 JS 文件，你可以写任意的 JS 代码，比如声明一个 对象 来存储一会要写任务的参数，或者是一个变量当作开关等等。 然后，所有的代码要包裹在123module.exports = function(grunt) &#123; ...&#125;; 里面。没有为什么。 在这里面的代码，除去你自己写的乱七八糟的 JS，与 Grunt 有关的主要有三块代码：任务配置代码、插件加载代码、任务注册代码。 顾名思义，这三块代码，任务配置代码就是调用插件配置一下要执行的任务和实现的功能，插件加载代码就是把需要用到的插件加载进来，任务注册代码就是注册一个 task，里面包含刚在前面编写的任务配置代码。 这样，就可以用 grunt 来执行注册的一个 task 从而根据任务配置代码调用需要的插件来执行相应的操作。 下面来分别看一下这三块代码的写法。 任务配置代码我就不一一配置了，这是我最后配置完成后的代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113module.exports = function(grunt) &#123; var sassStyle = 'expanded'; grunt.initConfig(&#123; pkg: grunt.file.readJSON('package.json'), sass: &#123; // sass转译 output : &#123; options: &#123; style: sassStyle &#125;, files: &#123; './scss/style.css': './scss/style.scss' &#125; &#125; &#125;, less: &#123; development: &#123; // less转译 src: ['./less/user.less'], dest: './less/global.css', &#125; &#125;, concat: &#123; //文件合并 cssDist: &#123; src: ['./css/*.css'], dest: './style/global.css', &#125;, dist: &#123; src: ['./src/*.js'], dest: './scripts/global.js', &#125;, &#125;, cssmin: &#123; // css压缩 options: &#123; keepSpecialComments: 0 &#125;, compress: &#123; files: &#123; './style/default.min.css': [ \"css/css.css\", \"css/commen.css\" ] &#125; &#125; &#125;, uglify: &#123; // Js 压缩 compressjs: &#123; files: &#123; './scripts/global.min.js': ['./scripts/global.js'] &#125; &#125; &#125;, jshint: &#123; // 语法检查 all: ['./scripts/global.js'] &#125;, watch: &#123; // 实时监听 scripts: &#123; files: ['./src/plugin.js','./src/plugin2.js'], tasks: ['concat','uglify'] &#125;, sass: &#123; files: ['./scss/style.scss'], tasks: ['sass'] &#125;, css: &#123; files: ['./css/*.css'], tasks: ['concat'] &#125;, livereload: &#123; options: &#123; livereload: '&lt;%= connect.options.livereload %&gt;' &#125;, files: [ 'index.html', './scss/style.css', './scripts/global.min.js' ] &#125; &#125;, connect: &#123; options: &#123; port: 9000, open: true, livereload: 35729, // Change this to '0.0.0.0' to access the server from outside hostname: 'localhost' &#125;, server: &#123; options: &#123; port: 9001, base: './' &#125; &#125; &#125; &#125;); grunt.loadNpmTasks('grunt-contrib-sass'); grunt.loadNpmTasks('grunt-contrib-cssmin'); grunt.loadNpmTasks('grunt-contrib-less'); grunt.loadNpmTasks('grunt-contrib-concat'); grunt.loadNpmTasks('grunt-contrib-jshint'); grunt.loadNpmTasks('grunt-contrib-uglify'); grunt.loadNpmTasks('grunt-contrib-watch'); grunt.loadNpmTasks('grunt-contrib-connect'); grunt.registerTask('outputcss',['sass']); grunt.registerTask('concatjs',['concat']); grunt.registerTask('compressjs',['concat','uglify']); grunt.registerTask('watchit',['sass','concat','uglify','connect','watch']); grunt.registerTask('default',['sass','less','concat','cssmin','uglify','connect','watch']);&#125;; 添加了 connect 任务，用来新建一个本地服务器，以当前目录作为服务器根目录，然后添加 watch 任务，监听 Scss 文件变动，如果变了，执行一下 sass 任务，监听JS，css，如果变了，执行 合并、检查、压缩 任务，监听 html、css、js 文件，如果变动，livereload 自动刷新打开的页面。 而注册的 watchit task 就是我们的终极 task，第一次执行，先编译 sass、再合并、检查、压缩、开启服务器、监听文件变动。我们执行一下 grunt watchit 就可以看到效果了，你可以修改一下 scss 文件，把字体设置大一点，切换到浏览器的时候，就看到了实时刷新效果。也可以修改一下 JS，故意改错一下，会发现 jshint 会提示你出错了。 项目文件传输与协作项目开发完成之后，往往需要 push 到 Github 或者上传 FTP 等。或许其他人会接手你的项目继续开发，或者你会换台电脑进行开发。 当小明用 git 上传 Github 的时候，傻了眼，项目里 node_modules 文件夹下面的东西要十几M呢，这比我项目本身还大，上传下载都不方便。 其实这些插件和 grunt 不需要上传，因为有 package.json 这个文件记录了你这个项目中依赖的 grunt 插件，你只需要上传这个文件即可。下载下来之后，只需要在这个项目文件夹下面，输入命令 npm install，NPM 会自动读取 package.json 文件，将 grunt 和有关插件给你下载下来，很方便的。 也不需要在本地上传的时候删除，用 git 的话，可以使用 .gitignore 文件来过滤掉这个文件夹，禁止 git 追踪。 总结与扩展阅读Grunt 就是这样一种任务自动运行器，应用好它可以减轻很多不必要的人工操作，只需要专注 coding 就可以。甚至还有Grunt 插件帮你自动完成 CSS Sprite，更多功能还需要你自己去摸索。 新手看完本文，再看一下 Grunt 官方文档 应该没有太多疑问了，那就再看一遍把。当然也有中文版。 除了 Grunt 之外，同类型比较火的还有 Gulp 这个工具。其实两个东西的功能是一样的，只不过是任务配置 JS 的语法不同，Gulp 的 Gulpfile.js 的写法更加通俗易懂，上手更快。但是 Gulp 的插件等感觉不如 Grunt，Grunt 官方提供了一些常见的插件，满足大部分日常工作，而且可靠值得信赖，而 Gulp 好像没有太多官方出品，各种插件不太规范。简单的说，Grunt 和 Gulp 就像 iPhone 与 Android 一样，一个质量高学习难一点，一个学起来简单但是有点那个，你懂得。 此外，可以看一些高手的项目，你会发现更好的 Grunt 用法，比如 Yeoman 生成的项目，就有很完善的 Grunt 任务和插件，此外，jQuery 等也用 Grunt 进行打包，这些 Grunt 文件你都可以查看研究一下他们的写法和用法，受益匪浅。 最后，如果你懒得跟着文章一点点的配置示例项目，你也可以跳转到示例项目的 grunt 分支，这里面是我配置好的，你需要先 npm install 然后就可以直接执行那些命令。","tags":[]},{"title":"New Date的属性","date":"2017-07-04T07:02:04.000Z","path":"2017/07/04/New-Date的属性/","text":"在写代码用到时间的时候经常记不住获取时、分、秒等的属性怎么写，因此在这里将他们整理出来，方便查询。 时间用法表格 产品 价格 getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31)。 getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6)。 getFullYear() 从 Date 对象以四位数字返回年份。 getHours() 返回 Date 对象的小时 (0 ~ 23)。 getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)。 getMinutes() 返回 Date 对象的分钟 (0 ~ 59)。 getMonth() 从 Date 对象返回月份 (0 ~ 11)。 getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。 getTime() 返回 1970 年 1 月 1 日至今的毫秒数。 getTimezoneOffset() 返回本地时间与格林威治标准时间 (GMT) 的分钟差。 getUTCDate() 根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。 getUTCDay() 根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。 getUTCFullYear() 根据世界时从 Date 对象返回四位数的年份。 getUTCHours() 根据世界时返回 Date 对象的小时 (0 ~ 23)。 getUTCMilliseconds() 根据世界时返回 Date 对象的毫秒(0 ~ 999)。 getUTCMinutes() 根据世界时返回 Date 对象的分钟 (0 ~ 59)。 getUTCMonth() 根据世界时从 Date 对象返回月份 (0 ~ 11)。 getUTCSeconds() 根据世界时返回 Date 对象的秒钟 (0 ~ 59)。 getYear() 已废弃。 请使用 getFullYear() 方法代替。 parse() 返回1970年1月1日午夜到指定日期（字符串）的毫秒数。 setDate() 设置 Date 对象中月的某一天 (1 ~ 31)。 setFullYear() 设置 Date 对象中的年份（四位数字）。 setHours() 设置 Date 对象中的小时 (0 ~ 23)。 setMilliseconds() 设置 Date 对象中的毫秒 (0 ~ 999)。 setMinutes() 设置 Date 对象中的分钟 (0 ~ 59)。 setMonth() 设置 Date 对象中月份 (0 ~ 11)。 setSeconds() 设置 Date 对象中的秒钟 (0 ~ 59)。 setTime() setTime() 方法以毫秒设置 Date 对象。 setUTCDate() 根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。 setUTCFullYear() 根据世界时设置 Date 对象中的年份（四位数字）。 setUTCHours() 根据世界时设置 Date 对象中的小时 (0 ~ 23)。 setUTCMilliseconds() 根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。 setUTCMinutes() 根据世界时设置 Date 对象中的分钟 (0 ~ 59)。 setUTCMonth() 根据世界时设置 Date 对象中的月份 (0 ~ 11)。 setUTCSeconds() setUTCSeconds() 方法用于根据世界时 (UTC) 设置指定时间的秒字段。 setYear() 已废弃。请使用 setFullYear() 方法代替。 toDateString() 把 Date 对象的日期部分转换为字符串。 toGMTString() 已废弃。请使用 toUTCString() 方法代替。 toISOString() 使用 ISO 标准返回字符串的日期格式。 toJSON() 以 JSON 数据格式返回日期字符串。 toLocaleDateString() 根据本地时间格式，把 Date 对象的日期部分转换为字符串。 toLocaleTimeString() 根据本地时间格式，把 Date 对象的时间部分转换为字符串。 toLocaleString() 据本地时间格式，把 Date 对象转换为字符串。 toString() 把 Date 对象转换为字符串。 toTimeString() 把 Date 对象的时间部分转换为字符串。 toUTCString() 根据世界时，把 Date 对象转换为字符串。 UTC() 根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。 valueOf() 返回 Date 对象的原始值。","tags":[]},{"title":"常用电脑快捷键","date":"2017-07-04T02:25:55.000Z","path":"2017/07/04/常用电脑快捷键/","text":"习惯了鼠标的运用，对于键盘本身却并不是特别了解，在这里，整理了一些常用的快捷键帮助自己更好的使用电脑。 从所有快捷键中整理出的自己常用的快捷键 WIN 显示或隐藏“开始”菜单WIN + D 显示桌面WIN + M 最小化所有窗口 //我认为和WIN + D大同小异WIN + SHIFt + M 还原最小化的窗口WIN + E 打开“我的电脑”WIN + R 打开“运行”对话框Ctrl + A 选中全部内容Ctrl + C 复制Ctrl + X 剪切Ctrl + V 粘贴Ctrl + Z 撤消Ctrl + W 关闭程序Ctrl + F4 关闭当前页面DELETE 删除Shift + Delete 永久删除所选项，而不将它放在‘回收站’中Alt + F4 关闭当前项目或退出程序Alt + Tab在打开的项目之中进行切换F5刷新当前窗口Shift + F5 强制刷新 常用电脑快捷键 F1显示程序或系统帮助内容F2重新命名所选项目F3搜索文件或文件夹F5刷新当前窗口F6循环切换屏幕元素F10激活当前程序中的菜单条Ctrl + A 选中全部内容Ctrl + C 复制Ctrl + X 剪切Ctrl + V 粘贴Ctrl + Z 撤消Ctrl + Esc 显示“开始”菜单Alt + Enter 查看所选项目的属性Alt + F4 关闭当前项目或退出程序Alt + 空格键 为当前窗口打开快捷菜单Alt + Tab 在打开的项目之间切换Alt + Esc 以项目打开的顺序循环切换DELETE删除Shift + Delete 永久删除所选项Shift + F10 显示所选项的快捷菜单Esc取消当前任务ctrl + alt + delete 电脑锁屏快捷键电脑：print screen sysrq 在键盘右上角一般靠近F12键截图qq：ctrl + alt + A 截图360浏览器：Ctrl + Shift + X 截图 Ctrl快捷键 Ctrl + S 保存Ctrl + W 关闭程序Ctrl + N 新建Ctrl + O 打开Ctrl + Z 撤销Ctrl + F 查找Ctrl + X剪切Ctrl + C 复制Ctrl + V 粘贴Ctrl + A 全选Ctrl + [ 缩小文字Ctrl + [ 缩小文字Ctrl + ] 放大文字Ctrl + B 粗体Ctrl + I 斜体Ctrl + U 下划线Ctrl + Shift 输入法切换Ctrl + 空格 中英文切换Ctrl + 回车 QQ号中发送信息Ctrl + Home 光标快速移到文件头Ctrl + End 光标快速移到文件尾Ctrl + Esc 显示开始菜单Ctrl + Shift+ 快速放大文字Ctrl + F5 在IE中强行刷新Ctrl + 拖动文件 启动\\关闭输入法Ctrl + Shift + 拖动文件 创建快捷方式 Alt快捷键 Alt + F4 关闭当前程序Alt + 空格 + C 关闭窗口Alt + 空格 + N 最小化当前窗口Alt + 空格 + R 恢复最小化窗口Alt + 空格 + X 最大化当前窗口Alt + 空格 + M 移动窗口Alt + 空格 + S 改变窗口大小Alt + Tab 两个程序交换Alt + F 打开文件菜单Alt + V 打开视图菜单Alt + E 打开编辑菜单Alt + I 打开插入菜单Alt + O 打开格式菜单Alt + T 打开工具菜单Alt + A 打开表格菜单Alt + W 打开窗口菜单Alt + H 打开帮助菜单Alt + 回车 查看文件属性Alt + 双击文件 查看文件属性Shift + 空格 半\\全角切换Shift + 右击右菜单 打开方式Shift + F10 选中文件的右菜单Shift + 多级文件 全部关闭Shift + Del 直接删除文件 对话框快捷键 Ctrl + Tab 在选项卡之间向前移动Ctrl + Shift + Tab 在选项卡之间向后移动Shift + Tab 在选项之间向后移动ALT + 带下划线的字母 执行相应的命令或选中相应的选项Enter执行活选项动或按钮所对应的命令space空格键如果活选项动是复选框，则选中或清除该复选框F1显示帮助F4显示当前列表中的项目BackSpace如果在“另存为”或“打开”对话框中选中了某个文件夹，则打开上一级文件夹 辅助键盘快捷键 右侧SHIFT键八秒钟切换“筛选键”的开和关左边的ALT + 左边的SHIFT + PRINTSCREEN切换“高对比度”的开和关左边的ALT + 左边的SHIFT + NUMLOCK切换“鼠标键”的开和关Shift键五次切换“粘滞键”的开和关NumLock键五秒钟切换“切换键”的开和关Alt + Shift + + 扩展标题下的文本Alt + Shift + - 折叠标题下的文本Alt + Shift + A 扩展或折叠所有文本或标题数字键盘上的斜杠（/）隐藏或显示字符格式Alt + Shift + L 只显示首行正文或显示全部正文Alt + Shift + 1 显示所有具有”标题1”样式的标题Alt + Shift + n 显示从”标题1”到”标题n”的“Windows资源管理器”键盘快捷键END显示当前窗口的底端Home显示当前窗口的顶端NUMLOCK + 数字键盘的星号(*) 显示所选文件夹的所有子文件夹NUMLOCK + 数字键盘的加号( + ) 显示所选文件夹的内容NUMLOCK + 数字键盘的减号(-) 折叠所选的文件夹单独按Windows：显示或隐藏“开始”功能表Windows + BREAK 显示“系统属性”对话框Windows + D 显示桌面Windows + M 最小化所有窗口Windows + Shift + M 还原最小化的窗口Windows + E 开启“资源管理器”Windows + F 查找文件或文件夹Windows + CTRL + F 查找电脑Windows + F1 显示Windows“帮助”Windows + R 运行Windows + U 开启“公用程序管理器”Windows + L 切换使用者","tags":[]},{"title":"working copy locked 问题","date":"2017-06-29T06:10:10.000Z","path":"2017/06/29/working-copy-locked-问题/","text":"SVN本地更新时，由于一些操作中断更新，如磁盘空间不够，用户取消，可能会造成本地文件被锁定的情况。一般出现这种情况的解决方法：１、可以使用SVN clean up来清除锁定。 ２、如果不是本目录锁定，系统提示上一层目录锁定，需要到上一层或者根目录中清除。 ３.如果在根目录下都无法clean的话，一般采取的方法是另外找一个目录重新CHECKOUT。但有时有时SVN目录下可能有一些自己本地修改的文件，还未提交到SVN服务器，这时重新CHECKOUT需要注意本地文件的备份，并且不要强制覆盖服务器上其它人修改的内容。 ４.如果觉得第３种很麻烦，可以考虑这样的方法。其实SVN加锁会在.SVN（隐藏文件）中生成一个名字叫lock的文件（无后缀），查找所有的，手工删除。然后再尝试更新，系统可能会提示某个.base文件无法访问。找到它，把相关的文件或其所在的目录删除，重新UPDATE。工作量就小多了。 解决svn的working copy locked并且cleanup恢复不能的情况产生这种情况大多是因为上次svn命令执行失败且被锁定了。如果clean up没有效果的话只好手动删除锁定文件。cd 到svn项目目录下，然后执行如下命令del lock /q/s就把锁删掉了。","tags":[]},{"title":"微信小程序——400报错","date":"2017-06-23T02:26:27.000Z","path":"2017/06/23/微信小程序/","text":"最近一直跟着demo做小程序，但是刚开始就卡在了请求豆瓣电影API数据上，折腾了很久才发现问题，初始请求数据代码如下：1234567891011121314wx.request(&#123; url: 'http://api.douban.com/v2/movie/top250', method: 'GET', data: &#123;&#125;, header: &#123; 'Accept': 'application/json' &#125;, success: function(res) &#123; console.log(res); that.setData(&#123; movieList: res &#125;) &#125;&#125;) 但是请求之后总是报400错误:后来才发现，小程序升级之后，数据请求的header写法已经变了，需要修改请求头部1234567891011121314 wx.request(&#123; url: 'http://api.douban.com/v2/movie/top250', method: 'GET', data: &#123;&#125;, header: &#123; \"Content-Type\":\"json\" &#125;, success: function(res) &#123; console.log(res); that.setData(&#123; movieList: res &#125;) &#125;&#125;) 改成这样之后就OK了。","tags":[]},{"title":"VUE简单教程","date":"2017-06-20T08:17:38.000Z","path":"2017/06/20/VUE简单教程/","text":"在使用vue.js构建大型项目时建议使用NPM安装 安装webpack1npm install webpack -g 安装vue1234# 最新稳定版本$ npm install vue# 最新稳定兼容版本$ npm install vue@csp 安装vue cli，执行以下命令安装vue cli1npm install -g vue-cli 安装完vue-cli之后，我们就可以基于vue-webpack-simple模板和vue-webpack模板创建项目了在硬盘上找一个文件夹放工程用，在终端中进入该目录 根据模板创建项目123vue init webpack-simple 工程名字&lt;工程名字不能用中文&gt;或者创建vue1.0的项目vue init webpack-simple#1.0 工程名字&lt;工程名字不能用中文&gt; 在创建模板的时候会有一些初始化的设置： Target directory exists. Continue? (Y/n) 直接回车默认(然后会下载 vue2.0模板，这里可能需要连代理) Project name (vue-test) 直接回车默认 Project description (A Vue.js project) 直接回车默认 Author 写你自己的名字 cd 命令进入创建的工程目录并安装项目依赖在做项目时经常用到的是路由模块vue-router和网络请求模块vue-resource1npm install vue-router vue-resource --save 启动项目1npm run dev","tags":[]},{"title":"浅析解决跨域问题的几种方法","date":"2017-06-08T07:45:17.000Z","path":"2017/06/08/浅析解决跨域问题的几种方法/","text":"一、JSONP 原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。 由于同源策略的限制，XmlHttpRequest只允许请求当前源(域名、协议、端口)的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。 优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。 JSONP：json+padding(内填充)，顾名思义，就是把JSON填充到一个盒子里 javascript 代码 1234567891011121314151617createJs(sUrl)&#123; var oScript = document.createElement('script'); oScript.type = 'text/javascript'; oScript.src = sUrl; document.getElementsByTagName('head')[0].appendChild(oScript); &#125; createJs('jsonp.js'); box(&#123; 'name': 'test' &#125;); function box(json)&#123; alert(json.name); &#125; 二、CORS 服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。 三、通过修改document.domain来跨子域 将子域和主域的document.domain设为同一个主域.前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域 主域相同的使用document.domain 四、使用window.name来进行跨域 window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的 五、使用HTML5中新引进的window.postMessage方法来跨域传送数据 还有flash、在服务器上设置代理页面等跨域方式。个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。","tags":[]},{"title":"Git","date":"2017-06-06T08:59:47.000Z","path":"2017/06/06/Git/","text":"当了这么长时间的程序员，突然发现对于Git好像不太会用，在这里，让我们一起学习一下Git的使用方法吧。 Git初始化Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。使用当前目录作为Git仓库，我们只需使它初始化。 使用当前目录作为Git仓库，我们只需使它初始化。该命令执行完后会在当前目录生成一个 .git 目录。 1git init 使用我们指定目录作为Git仓库。 1git init newrepo 初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。 如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交： 123$ git add *.c$ git add README$ git commit -m '初始化项目版本' 添加文件首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。 我在版本库newrepo目录下新建一个记事本文件 readme.txt 内容如下：11111111 第一步：使用命令 git add readme.txt添加到暂存区里面去。如下1$ git add readme.txt 用命令 git commit告诉Git，把文件提交到仓库。后面的是内容提示，可加可不加1$ git commit -m '提交test.txt文件' 现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下： 1$ git status 如果文件有改动知，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。 版本控制如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行内容为33333333333333.并按照上述步骤进行提交。 现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示： 1$ git log git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下： 1$ git log –pretty=oneline 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset –hard HEAD~100 即可。如果想回退到上一个版本的命令如下操作： 1$ git reset --hard HEAD^ 1$ git reset --hard HEAD~100 再来查看下 readme.txt内容如下：通过命令cat readme.txt查看 1$ cat readme.txt 我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：git reset –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下： 1$ git reflog 通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令git reset –hard 6fcfc89来恢复了。演示如下： 1$ git reset --hard 6fcfc89 可以看到 目前已经是最新的版本了。","tags":[]},{"title":"BlueLake博客主题的详细配置","date":"2017-05-25T03:41:18.000Z","path":"2017/05/25/BlueLake博客主题的详细配置/","text":"BlueLake主题写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。 在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。 1. 安装您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。 1.1 安装主题在根目录下打开终端窗口： git bash 1$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake 1.2 安装主题渲染器BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。 12$ npm install hexo-renderer-jade --save$ npm install hexo-renderer-stylus --save 1.3 启用主题打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake) 1theme: BlueLake 1.4 验证首先启动 Hexo 本地站点，并开启调试模式： 1$ hexo s --debug 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 1.5 更新主题今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。 12cd themes/BlueLakegit pull 2. 配置2.1 配置网站头部显示文字打开根_config.yml，找到： 1234title: subtitle: description:about: title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。","tags":[]},{"title":"缓存","date":"2017-05-24T09:43:48.000Z","path":"2017/05/24/newBlog/","text":"前端用到的的缓存一般有三种Cookie, LocalStorage 与 SessionStorage CookieCookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右，是网景公司的前雇员 Lou Montulli 在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。 LocalStoragelocalStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储，而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今，localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+，那以 userData 作为你的 polyfill 的方案是种不错的选择。 SessionStoragesessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，sessionStorage 中的数据就会被清空。","tags":[]},{"title":"Hexo 介绍","date":"2017-05-24T09:04:57.390Z","path":"2017/05/24/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]